---
import BlogLayout from "../../../layouts/BlogLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const statusStyles = {
  planning: {
    label: "Planning",
    text: "text-[#0f172a]",
    bg: "bg-[#fbbf24]/25",
    ring: "ring-[#f59e0b]/40",
  },
  "in-progress": {
    label: "In Progress",
    text: "text-[#065f46]",
    bg: "bg-[#34d399]/20",
    ring: "ring-[#10b981]/40",
  },
  "on-hold": {
    label: "On Hold",
    text: "text-[#7c2d12]",
    bg: "bg-[#fb923c]/20",
    ring: "ring-[#f97316]/40",
  },
  completed: {
    label: "Completed",
    text: "text-[#1f2937]",
    bg: "bg-[#a5b4fc]/25",
    ring: "ring-[#6366f1]/40",
  },
} as const;

export async function getStaticPaths() {
  const devlogs = await getCollection("devlogs", ({ data }) => !data.draft);
  const projects = await getCollection("devlogProjects", ({ data }) => !data.draft);

  const paths = devlogs
    .map((log) => {
      const project = projects.find((p) => p.slug === log.data.projectSlug);
      if (!project) {
        return null;
      }

      return {
        params: { project: project.slug, log: log.slug },
        props: { projectEntry: project, logEntry: log },
      } satisfies {
        params: { project: string; log: string };
        props: { projectEntry: CollectionEntry<"devlogProjects">; logEntry: CollectionEntry<"devlogs"> };
      };
    })
    .filter(Boolean) as Array<{
      params: { project: string; log: string };
      props: { projectEntry: CollectionEntry<"devlogProjects">; logEntry: CollectionEntry<"devlogs"> };
    }>;

  return paths;
}

const { projectEntry, logEntry } = Astro.props as {
  projectEntry: CollectionEntry<"devlogProjects">;
  logEntry: CollectionEntry<"devlogs">;
};

const { Content: LogContent } = await logEntry.render();
const { Content: ProjectIntro } = await projectEntry.render();
const pageTitle = logEntry.data.title;
const description = logEntry.data.summary ?? projectEntry.data.summary;
const backText = `Back to ${projectEntry.data.title}`;
const backHref = `/dev-log/${projectEntry.slug}`;
---


<BlogLayout
  title={pageTitle}
  description={description}
  pubDate={logEntry.data.pubDate}
  tags={logEntry.data.tags}
  badgeLabel="Dev Log"
  roleLabel="Bryan Jacinto"
  backHref={backHref}
  backText={backText}
>
  {(projectEntry.data.repoUrl || projectEntry.data.liveUrl) && (
    <Fragment slot="meta">
      {projectEntry.data.repoUrl && (
        <>
          <div class="meta-divider">•</div>
          <div class="meta-item">
            <svg class="meta-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
              <path d="M9 19c-4 1.5-4-2.5-6-3m12 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 18 4.77 5.07 5.07 0 0 0 17.91 1S16.73.65 15 2.48a13.38 13.38 0 0 0-6 0C7.27.65 6.09 1 6.09 1A5.07 5.07 0 0 0 6 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 10 21.13V23"></path>
            </svg>
            <a href={projectEntry.data.repoUrl} target="_blank" rel="noopener">
              Repository
            </a>
          </div>
        </>
      )}
      {projectEntry.data.liveUrl && (
        <>
          <div class="meta-divider">•</div>
          <div class="meta-item">
            <svg class="meta-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
              <path d="M15 10l4.55 1.52A2 2 0 0 1 21 13.43V19a2 2 0 0 1-2 2h-3"></path>
              <path d="M9 14l-4.55-1.52A2 2 0 0 1 3 10.57V5a2 2 0 0 1 2-2h3"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
            <a href={projectEntry.data.liveUrl} target="_blank" rel="noopener">
              Live build
            </a>
          </div>
        </>
      )}
    </Fragment>
  )}

  <LogContent />

</BlogLayout>



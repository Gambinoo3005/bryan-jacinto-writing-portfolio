---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const statusStyles = {
  planning: { label: "Planning" },
  "in-progress": { label: "In Progress" },
  "on-hold": { label: "On Hold" },
  completed: { label: "Completed" },
} as const;

const filters = [
  { value: "all", label: "All Projects" },
  { value: "planning", label: "Planning" },
  { value: "in-progress", label: "In Progress" },
  { value: "on-hold", label: "On Hold" },
  { value: "completed", label: "Completed" },
];

const projects = (await getCollection("devlogProjects", ({ data }) => !data.draft))
  .sort((a, b) => {
    const aDate = a.data.endDate ?? a.data.startDate ?? new Date(0);
    const bDate = b.data.endDate ?? b.data.startDate ?? new Date(0);
    return +bDate - +aDate;
  });
---

<BaseLayout
  title="Dev Log - Bryan Jacinto"
  description="Progress updates and behind-the-scenes notes for ongoing projects."
>
  <section class="w-full min-h-screen" style="background-color: var(--section-bg); margin-top: -88px;">
    <div class="mx-auto max-w-6xl px-5 sm:px-6 pt-16 pb-16">
      <div class="scroll-reveal mb-12 text-center">
        <h1 class="mb-4">Dev Log</h1>
        <p class="text-[var(--color-muted)] text-base sm:text-lg max-w-2xl mx-auto">
          A rolling journal of in-progress builds, experiments, and lessons. Follow along as each project evolves with candid notes, milestones, and course corrections.
        </p>
      </div>

      <div class="filter-tabs mb-10 scroll-reveal">
        {filters.map((filter, index) => (
          <button
            class={`filter-tab ${index === 0 ? "active" : ""}`}
            data-filter={filter.value}
          >
            {filter.label}
          </button>
        ))}
      </div>

      {projects.length > 0 ? (
        <div class="space-y-8">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="devlog-grid">
            {projects.map((project, index) => {
              const statusKey = project.data.status in statusStyles ? project.data.status : "in-progress";
              const status = statusStyles[statusKey as keyof typeof statusStyles];
              const startDate = project.data.startDate;
              const endDate = project.data.endDate;

              const timeframe = startDate && endDate
                ? `${startDate.toLocaleDateString("en-US", { month: "short" })} â€“ ${endDate.toLocaleDateString("en-US", { month: "short", year: "numeric" })}`
                : startDate
                ? `Since ${startDate.toLocaleDateString("en-US", { month: "short", year: "numeric" })}`
                : endDate
                ? `Shipped ${endDate.toLocaleDateString("en-US", { month: "short", year: "numeric" })}`
                : null;

              return (
                <article
                  class="scroll-reveal scroll-reveal-item devlog-card group"
                  style={`transition-delay: ${index * 0.1}s;`}
                  data-status={statusKey}
                >
                  <a href={`/dev-log/${project.slug}`} class="block h-full">
                    <div class="h-full flex flex-col rounded-2xl border border-[var(--color-border)] bg-[var(--color-surface)] overflow-hidden shadow-sm transition-all duration-300 hover:shadow-xl hover:border-[var(--color-link)] hover:-translate-y-1 min-h-[20rem]">
                      
                      <div class="flex-1 flex flex-col p-5">
                        <!-- Status & Timeframe -->
                        <div class="flex items-center gap-2 mb-3 text-xs text-[var(--color-muted)]">
                          <span class={`status-pill status-pill--${statusKey} px-2 py-1 rounded-full bg-[var(--surface-glass)] border border-[var(--color-border)] font-semibold uppercase tracking-wide flex items-center gap-1.5`}>
                            <span class="status-dot"></span>
                            {status.label}
                          </span>
                          {timeframe && <span>{timeframe}</span>}
                        </div>

                        <!-- Title -->
                        <h2 class="text-lg font-semibold mb-2 text-[var(--color-text)] group-hover:text-[var(--color-link)] transition-colors">
                          {project.data.title}
                        </h2>

                        <!-- Description -->
                        <p class="text-sm text-[var(--color-muted)] mb-4 flex-1 line-clamp-3">
                          {project.data.summary}
                        </p>

                        <!-- View Timeline Button -->
                        <div class="flex items-center gap-2 text-sm font-semibold text-[var(--color-link)] group-hover:gap-3 transition-all">
                          <span>View timeline</span>
                          <svg class="h-4 w-4 transition-transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 0 1 .02-1.06L11.168 10 7.23 6.29a.75.75 0 1 1 1.04-1.08l4.5 4.25a.75.75 0 0 1 0 1.08l-4.5 4.25a.75.75 0 0 1-1.06-.02z" clip-rule="evenodd" />
                          </svg>
                        </div>

                        <!-- Tags -->
                        {project.data.tags.length > 0 && (
                          <div class="flex flex-wrap gap-1.5 mt-4 pt-4 border-t border-[var(--color-border)]">
                            {project.data.tags.slice(0, 3).map((tag) => (
                              <span class="text-xs px-2 py-0.5 rounded-full bg-[var(--surface-glass)] text-[var(--color-muted)]">
                                {tag.charAt(0).toUpperCase() + tag.slice(1)}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </a>
                </article>
              );
            })}
          </div>
          <nav class="pagination-container scroll-reveal" id="devlog-pagination" aria-label="Dev log pagination" hidden></nav>
        </div>
      ) : (
        <div class="text-center py-16">
          <p class="text-[var(--color-muted)] text-lg">No dev log projects yet. Check back soon!</p>
        </div>
      )}
    </div>
  </section>

  <style is:global>
    .scroll-reveal {
      opacity: 0;
      transform: translateY(40px);
      transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    }

    .scroll-reveal.is-visible {
      opacity: 1;
      transform: translateY(0);
    }

    .scroll-reveal-item {
      opacity: 0;
      transform: translateY(30px);
      transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }

    .scroll-reveal.is-visible .scroll-reveal-item {
      opacity: 1;
      transform: translateY(0);
    }

    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>

  <style>
    .filter-tabs {
      display: flex;
      justify-content: center;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    .filter-tab {
      background: var(--card-bg);
      border: 1px solid var(--color-border);
      color: var(--color-text);
      padding: 0.75rem 1.5rem;
      border-radius: 2rem;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .filter-tab:hover {
      background: var(--color-surface);
      border-color: var(--color-accent);
      transform: translateY(-1px);
    }

    .filter-tab.active {
      background: var(--color-link);
      color: var(--color-bg);
      border-color: var(--color-link);
    }

    .devlog-card {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .devlog-card h2 {
      font-size: 1.125rem;
      line-height: 1.5;
      font-weight: 600;
    }

    .status-pill--planning {
      background: color-mix(in srgb, #fbbf24 18%, transparent);
      border-color: color-mix(in srgb, #f59e0b 30%, transparent);
      color: #78350f;
    }

    .status-pill--in-progress {
      background: color-mix(in srgb, #34d399 18%, transparent);
      border-color: color-mix(in srgb, #10b981 28%, transparent);
      color: #064e3b;
    }

    .status-pill--on-hold {
      background: color-mix(in srgb, #fb923c 18%, transparent);
      border-color: color-mix(in srgb, #f97316 28%, transparent);
      color: #7c2d12;
    }

    .status-pill--completed {
      background: color-mix(in srgb, #a5b4fc 20%, transparent);
      border-color: color-mix(in srgb, #6366f1 30%, transparent);
      color: #312e81;
    }

    .status-dot {
      width: 0.45rem;
      height: 0.45rem;
      border-radius: 50%;
      background: currentColor;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .pagination-container {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      align-items: center;
    }

    .pagination-container[hidden] {
      display: none;
    }

    .pagination-meta {
      font-size: 0.85rem;
      color: var(--color-muted);
      text-align: center;
    }

    .pagination-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;
      align-items: center;
    }

    .pagination-button {
      background: var(--card-bg);
      border: 1px solid var(--color-border);
      color: var(--color-text);
      padding: 0.5rem 0.9rem;
      border-radius: 9999px;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .pagination-button:hover:not(:disabled) {
      background: var(--color-surface);
      border-color: var(--color-link);
      transform: translateY(-1px);
    }

    .pagination-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .pagination-button.active {
      background: var(--color-link);
      color: var(--color-bg);
      border-color: var(--color-link);
    }
  </style>

  <script>
    const observerOptions = {
      root: null,
      rootMargin: '0px 0px -100px 0px',
      threshold: 0.15
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
        }
      });
    }, observerOptions);

    document.addEventListener('DOMContentLoaded', () => {
      const revealElements = document.querySelectorAll('.scroll-reveal');
      revealElements.forEach(el => observer.observe(el));

      const filterTabs = document.querySelectorAll<HTMLButtonElement>('.filter-tab');
      const projectCards = Array.from(document.querySelectorAll<HTMLElement>('#devlog-grid article'));
      const paginationContainer = document.querySelector<HTMLElement>('#devlog-pagination');
      const pageSize = 6;
      let currentPage = 1;

      projectCards.forEach(card => {
        card.dataset.filtered = 'true';
      });

      const getFilteredCards = () =>
        projectCards.filter(card => card.dataset.filtered !== 'false');

      const ensureWithinRange = (page: number, totalPages: number) =>
        Math.min(Math.max(page, 1), totalPages);

      const createButton = (label: string, targetPage: number, options: { disabled?: boolean; active?: boolean }) => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'pagination-button';
        button.textContent = label;
        if (options.active) {
          button.classList.add('active');
        }
        button.disabled = options.disabled ?? false;
        if (!button.disabled) {
          button.addEventListener('click', () => {
            const filteredCards = getFilteredCards();
            const totalPages = Math.max(1, Math.ceil(filteredCards.length / pageSize));
            currentPage = ensureWithinRange(targetPage, totalPages);
            renderPagination();
            paginationContainer?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          });
        }
        return button;
      };

      const renderPagination = () => {
        if (!paginationContainer) return;

        const filteredCards = getFilteredCards();
        const totalItems = filteredCards.length;

        projectCards.forEach(card => {
          const isFilteredIn = card.dataset.filtered !== 'false';
          if (!isFilteredIn) {
            card.hidden = true;
            card.style.display = 'none';
          }
        });

        if (totalItems === 0) {
          paginationContainer.hidden = true;
          paginationContainer.innerHTML = '';
          return;
        }

        const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));
        currentPage = ensureWithinRange(currentPage, totalPages);

        filteredCards.forEach((card, index) => {
          const pageForCard = Math.floor(index / pageSize) + 1;
          const isVisible = pageForCard === currentPage;
          card.hidden = !isVisible;
          card.style.display = isVisible ? 'block' : 'none';
          if (isVisible) {
            card.style.animation = 'fadeInUp 0.3s ease forwards';
          }
        });

        if (totalItems <= pageSize) {
          paginationContainer.hidden = true;
          paginationContainer.innerHTML = '';
          return;
        }

        paginationContainer.hidden = false;
        paginationContainer.innerHTML = '';

        const meta = document.createElement('div');
        meta.className = 'pagination-meta';
        const rangeStart = (currentPage - 1) * pageSize + 1;
        const rangeEnd = Math.min(currentPage * pageSize, totalItems);
        meta.textContent = `Showing ${rangeStart}-${rangeEnd} of ${totalItems} project updates`;

        const controls = document.createElement('div');
        controls.className = 'pagination-controls';

        controls.appendChild(createButton('Prev', currentPage - 1, { disabled: currentPage === 1 }));

        for (let page = 1; page <= totalPages; page += 1) {
          controls.appendChild(
            createButton(page.toString(), page, { active: page === currentPage })
          );
        }

        controls.appendChild(createButton('Next', currentPage + 1, { disabled: currentPage === totalPages }));

        paginationContainer.append(meta, controls);
      };

      filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const filter = tab.dataset.filter ?? 'all';

          filterTabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');

          projectCards.forEach(card => {
            const matches = filter === 'all' || card.getAttribute('data-status') === filter;
            card.dataset.filtered = matches ? 'true' : 'false';
          });

          currentPage = 1;
          renderPagination();
        });
      });

      renderPagination();
    });
  </script>
</BaseLayout>

---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const entries = await getCollection("blogs", ({ data }) => !data.draft);
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const recentPosts = (await getCollection("blogs", ({ data }) => !data.draft))
  .filter((post) => post.slug !== entry.slug)
  .sort((a, b) => +b.data.pubDate - +a.data.pubDate)
  .slice(0, 3);

const currentUrl = Astro.url?.href ?? "";
const encodedUrl = encodeURIComponent(currentUrl);
const encodedTitle = encodeURIComponent(entry.data.title);

const shareLinks = [
  {
    label: "Share on LinkedIn",
    icon: "linkedin",
    href: `https://www.linkedin.com/shareArticle?mini=true&url=${encodedUrl}&title=${encodedTitle}`,
  },
  {
    label: "Share on X",
    icon: "x",
    href: `https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedTitle}`,
  },
  {
    label: "Share on Facebook",
    icon: "facebook",
    href: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
  },
];
---

<BaseLayout
  title={entry.data.title}
  description={entry.data.description}
  ogImage={entry.data.ogImage}
>
  <!-- Hero Section -->
  <section class="blog-hero">
    <div class="hero-overlay"></div>
    {entry.data.heroImage && (
      <img 
        src={entry.data.heroImage} 
        alt={entry.data.title}
        class="hero-image"
        loading="eager"
        fetchpriority="high"
      />
    )}
    
    <div class="hero-content">
      <div class="hero-inner">
        <!-- Category Badge -->
        {entry.data.category && (
          <div class="category-badge">
            {entry.data.category}
          </div>
        )}

        <!-- Title -->
        <h1 class="hero-title">{entry.data.title}</h1>

        <!-- Meta Information -->
        <div class="hero-meta">
          <div class="meta-item">
            <svg class="meta-icon" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
            </svg>
            <span>{entry.data.author}</span>
          </div>
          
          <div class="meta-divider">â€¢</div>
          
          <div class="meta-item">
            <svg class="meta-icon" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
            </svg>
            <time datetime={entry.data.pubDate.toISOString()}>
              {entry.data.pubDate.toLocaleDateString('en-US', { 
                month: 'long', 
                day: 'numeric', 
                year: 'numeric' 
              })}
            </time>
          </div>
        </div>

        <!-- Description -->
        <p class="hero-description">{entry.data.description}</p>
      </div>
    </div>
  </section>

  <!-- Article Content -->
  <article class="blog-article">
    <div class="article-container">
      <!-- Content -->
      <div class="prose">
        <Content />
      </div>

      {shareLinks.length > 0 && (
        <div class="share-block">
          <h2 class="share-heading">Loved this read? Share it with your network.</h2>
          <div class="share-buttons">
            {shareLinks.map((link) => (
              <a
                class="share-button"
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={link.label}
              >
                {link.icon === "linkedin" && (
                  <svg class="share-icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M20.447 3H3.553A.553.553 0 0 0 3 3.553v16.894C3 20.95 3.05 21 3.553 21h16.894A.553.553 0 0 0 21 20.447V3.553A.553.553 0 0 0 20.447 3Zm-11.5 15.06H6.258V9.747h2.69V18.06Zm-1.344-9.43a1.56 1.56 0 1 1 0-3.12 1.56 1.56 0 0 1 0 3.12Zm11.503 9.43h-2.69v-4.4c0-1.05-.02-2.4-1.462-2.4-1.466 0-1.69 1.146-1.69 2.324v4.476h-2.69V9.747h2.582v1.142h.036c.359-.68 1.236-1.398 2.544-1.398 2.722 0 3.224 1.792 3.224 4.125v4.444Z" />
                  </svg>
                )}
                {link.icon === "x" && (
                  <svg class="share-icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M18.244 3H21l-6.383 7.294L21.5 21h-5.462l-3.9-5.3L7.5 21H4.743l6.783-7.747L3.5 3h5.6l3.51 4.864L18.244 3Zm-.964 16.02h1.471L7.78 4.052H6.222l11.058 14.968Z" />
                  </svg>
                )}
                {link.icon === "facebook" && (
                  <svg class="share-icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M22 12.073C22 6.505 17.523 2 12 2S2 6.505 2 12.073c0 4.99 3.657 9.128 8.438 9.88v-6.988H7.898v-2.892h2.54V9.845c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.196 2.238.196v2.47h-1.26c-1.243 0-1.63.773-1.63 1.562v1.875h2.773l-.443 2.892h-2.33v6.988C18.343 21.2 22 17.062 22 12.073Z" />
                  </svg>
                )}
                <span class="share-sr">{link.label}</span>
              </a>
            ))}
          </div>
        </div>
      )}

      <!-- Back to Blogs -->
      <div class="article-footer">
        <a href="/blogs" class="back-link">
          <svg class="back-icon" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"/>
          </svg>
          Back to Blogs
        </a>
      </div>
    </div>
  </article>

  {recentPosts.length > 0 && (
    <section class="recent-posts">
      <div class="recent-inner">
        <h2 class="recent-heading">Recent Posts</h2>
        <div class="recent-grid">
          {recentPosts.map((post) => (
            <article class="recent-card">
              <a href={`/blogs/${post.slug}`} class="recent-link">
                <div class="recent-card-body">
                  <div class="recent-meta">
                    <span class="recent-category">{post.data.category ?? "Blog"}</span>
                    <span class="recent-date">
                      {post.data.pubDate.toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </span>
                  </div>
                  <h3 class="recent-title">{post.data.title}</h3>
                  <p class="recent-summary">{post.data.description}</p>
                  <div class="recent-cta">
                    <span>Read article</span>
                    <svg viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <style>
    /* Hero Section */
    .blog-hero {
      position: relative;
      width: 100%;
      min-height: 400px;
      display: flex;
      align-items: flex-start;
      justify-content: center;
      background: var(--section-bg);
      overflow: visible;
      padding: 2rem 1rem 6rem 1rem;
      margin-top: -88px;
    }

    .hero-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.15;
      z-index: 0;
    }

    .hero-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        transparent 50%,
        var(--section-bg) 90%,
        var(--section-bg) 100%
      );
      z-index: 1;
    }

    .dark .hero-overlay {
      background: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0.6) 0%,
        rgba(0, 0, 0, 0.45) 40%,
        rgba(0, 0, 0, 0.3) 65%,
        var(--section-bg) 92%,
        var(--section-bg) 100%
      );
    }

    .hero-content {
      position: relative;
      z-index: 2;
      width: 100%;
      max-width: 1024px;
      margin: 0 auto;
      padding: 3rem 1.5rem;
    }

    .hero-inner {
      text-align: center;
    }

    .category-badge {
      display: inline-block;
      padding: 0.5rem 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.875rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: var(--color-text);
      background: var(--surface-glass);
      border: 1px solid var(--color-border);
      border-radius: 9999px;
    }

    .hero-title {
      font-size: clamp(2rem, 5vw, 3.5rem);
      font-weight: 800;
      line-height: 1.2;
      margin-bottom: 1.5rem;
      color: var(--color-heading);
      letter-spacing: -0.02em;
    }

    .hero-meta {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      color: var(--color-muted);
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .meta-icon {
      width: 1.25rem;
      height: 1.25rem;
      opacity: 0.7;
    }

    .meta-divider {
      opacity: 0.5;
    }

    .hero-description {
      font-size: 1.125rem;
      line-height: 1.7;
      color: var(--color-muted);
      max-width: 700px;
      margin: 0 auto;
    }

    /* Article Content */
    .blog-article {
      position: relative;
      z-index: 10;
      background-color: var(--section-bg);
      padding: 0 1rem 4rem 1rem;
      margin-top: -4rem;
    }

    .article-container {
      max-width: 880px;
      margin: 0 auto;
    }

    /* Prose Styles */
    .prose {
      color: var(--color-text);
      font-size: 1.0625rem;
      line-height: 1.8;
      max-width: min(80ch, 100%);
      margin: 0 auto;
      font-family: var(--font-serif);
    }

    .prose :global(h2) {
      font-size: 2rem;
      font-weight: 700;
      margin-top: 3rem;
      margin-bottom: 1.5rem;
      color: var(--color-heading);
      letter-spacing: -0.01em;
    }

    .prose :global(h3) {
      font-size: 1.5rem;
      font-weight: 600;
      margin-top: 2.5rem;
      margin-bottom: 1rem;
      color: var(--color-heading);
    }

    .prose :global(p) {
      margin-bottom: 1.5rem;
    }

    .prose :global(a) {
      color: var(--color-link);
      text-decoration: underline;
      transition: opacity 0.2s ease;
    }

    .prose :global(a:hover) {
      opacity: 0.8;
    }

    .prose :global(ul),
    .prose :global(ol) {
      margin-bottom: 1.5rem;
      padding-left: 1.5rem;
    }

    .prose :global(li) {
      margin-bottom: 0.5rem;
    }

    .prose :global(blockquote) {
      margin: 2rem 0;
      padding: 1.5rem;
      border-left: 4px solid var(--color-link);
      background: var(--surface-glass);
      font-style: italic;
      color: var(--color-muted);
    }

    .prose :global(code) {
      padding: 0.2rem 0.4rem;
      background: color-mix(in srgb, var(--surface-glass) 85%, transparent);
      border: 1px solid rgba(148, 163, 184, 0.25);
      border-radius: 0.35rem;
      font-size: 0.9em;
      font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
    }

    .prose :global(pre) {
      position: relative;
      margin: 2rem 0;
      padding: 1.5rem;
      background: radial-gradient(circle at top left, rgba(148, 163, 184, 0.18), transparent 65%), color-mix(in srgb, var(--surface-glass) 88%, transparent);
      border: 1px solid rgba(148, 163, 184, 0.35);
      border-radius: 0.9rem;
      max-height: 420px;
      overflow-x: auto;
      overflow-y: auto;
      box-shadow: 0 18px 40px rgba(15, 23, 42, 0.08);
    }

    .prose :global(pre code) {
      display: block;
      padding: 0;
      background: none;
      border: none;
      font-size: 0.92em;
      line-height: 1.65;
      font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
    }

    .prose :global(pre::-webkit-scrollbar) {
      width: 10px;
      height: 10px;
    }

    .prose :global(pre::-webkit-scrollbar-thumb) {
      background: rgba(71, 85, 105, 0.35);
      border-radius: 999px;
    }

    .prose :global(pre::-webkit-scrollbar-thumb:hover) {
      background: rgba(30, 64, 175, 0.45);
    }

    .prose :global(.code-toolbar) {
      position: absolute;
      top: 0.85rem;
      right: 0.9rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.35rem 0.75rem;
      border-radius: 999px;
      background: color-mix(in srgb, var(--surface-glass) 90%, transparent);
      border: 1px solid rgba(148, 163, 184, 0.35);
      backdrop-filter: blur(8px);
      font-size: 0.75rem;
      font-weight: 600;
      color: var(--color-muted);
      box-shadow: 0 10px 25px rgba(15, 23, 42, 0.08);
      z-index: 2;
    }

    .prose :global(.code-language) {
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .prose :global(.code-actions) {
      display: inline-flex;
      gap: 0.35rem;
    }

    .prose :global(.code-action) {
      appearance: none;
      border: none;
      background: color-mix(in srgb, var(--color-link) 18%, transparent);
      color: var(--color-link);
      padding: 0.25rem 0.6rem;
      border-radius: 0.5rem;
      font-size: 0.7rem;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s ease, transform 0.2s ease;
    }

    .prose :global(.code-action:hover) {
      background: color-mix(in srgb, var(--color-link) 30%, transparent);
      transform: translateY(-1px);
    }

    .prose :global(.code-action.is-success) {
      background: color-mix(in srgb, #34d399 35%, transparent);
      color: #065f46;
    }

    /* Share Block */
    .share-block {
      margin: 3.5rem auto 0 auto;
      padding: 2.5rem;
      border: 1px solid var(--color-border);
      border-radius: 1.5rem;
      background: var(--surface-glass);
      box-shadow: 0 18px 40px rgba(15, 23, 42, 0.05);
      text-align: center;
    }

    .share-heading {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 1.5rem;
      color: var(--color-heading);
    }

    .share-buttons {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .share-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      width: 3.25rem;
      height: 3.25rem;
      padding: 0;
      border-radius: 999px;
      border: 1px solid var(--color-border);
      background: var(--color-surface, #ffffff);
      color: var(--color-link);
      text-decoration: none;
      transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
    }

    .share-button:hover {
      transform: translateY(-2px);
      border-color: var(--color-link);
      box-shadow: 0 16px 32px rgba(15, 23, 42, 0.12);
    }

    .share-button:focus-visible {
      outline: 3px solid color-mix(in srgb, var(--color-link) 35%, transparent);
      outline-offset: 2px;
    }

    .share-icon {
      width: 1.35rem;
      height: 1.35rem;
      fill: currentColor;
    }

    .share-sr {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    /* Recent Posts */
    .recent-posts {
      padding: 4rem 1rem 6rem 1rem;
      background: var(--section-bg);
    }

    .recent-inner {
      max-width: 1080px;
      margin: 0 auto;
    }

    .recent-heading {
      font-size: clamp(2rem, 4vw, 2.5rem);
      font-weight: 700;
      margin-bottom: 2rem;
      text-align: center;
      color: var(--color-heading);
    }

    .recent-grid {
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
      gap: 1.75rem;
    }

    .recent-card {
      background: var(--color-surface, #ffffff);
      border: 1px solid var(--color-border);
      border-radius: 1.25rem;
      overflow: hidden;
      box-shadow: 0 20px 40px rgba(15, 23, 42, 0.08);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .recent-card:hover {
      transform: translateY(-6px);
      box-shadow: 0 24px 50px rgba(15, 23, 42, 0.12);
    }

    .recent-link {
      display: block;
      color: inherit;
      text-decoration: none;
      height: 100%;
    }

    .recent-card-body {
      padding: 1.75rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      height: 100%;
    }

    .recent-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.875rem;
      color: var(--color-muted);
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .recent-category {
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      padding: 0.35rem 0.75rem;
      background: var(--surface-glass);
      border-radius: 999px;
      border: 1px solid var(--color-border);
      font-weight: 600;
    }

    .recent-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--color-heading);
      line-height: 1.4;
    }

    .recent-summary {
      color: var(--color-muted);
      font-size: 0.975rem;
      line-height: 1.6;
      flex: 1;
    }

    .recent-cta {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 600;
      font-size: 0.95rem;
      color: var(--color-link);
      margin-top: auto;
      transition: gap 0.2s ease, color 0.2s ease;
    }

    .recent-cta svg {
      width: 1rem;
      height: 1rem;
      transition: transform 0.2s ease;
    }

    .recent-card:hover .recent-cta {
      gap: 0.75rem;
      color: var(--color-heading);
    }

    .recent-card:hover .recent-cta svg {
      transform: translateX(4px);
    }

    @media (max-width: 1024px) {
      .recent-grid {
        grid-template-columns: repeat(2, minmax(0, 1fr));
      }
    }

    @media (max-width: 768px) {
      .prose :global(.code-toolbar) {
        position: static;
        margin-bottom: 0.75rem;
        width: 100%;
        justify-content: space-between;
      }

      .share-block {
        padding: 2rem 1.5rem;
      }

      .recent-grid {
        grid-template-columns: repeat(1, minmax(0, 1fr));
      }

      .recent-card-body {
        padding: 1.5rem;
      }
    }

    .prose :global(img) {
      margin: 2rem 0;
      border-radius: 0.5rem;
      max-width: 100%;
      height: auto;
    }

    /* Article Footer */
    .article-footer {
      margin-top: 4rem;
      padding-top: 2rem;
      border-top: 1px solid var(--color-border);
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      font-size: 0.95rem;
      font-weight: 600;
      color: var(--color-text);
      background: var(--surface-glass);
      border: 1px solid var(--color-border);
      border-radius: 9999px;
      transition: all 0.2s ease;
      text-decoration: none;
    }

    .back-link:hover {
      background: var(--color-link);
      color: white;
      border-color: var(--color-link);
      transform: translateX(-4px);
    }

    .dark .back-link:hover {
      background: color-mix(in srgb, var(--color-link) 32%, var(--color-bg) 68%);
      color: var(--color-text);
      border-color: color-mix(in srgb, var(--color-link) 72%, var(--color-bg) 28%);
    }

    .back-icon {
      width: 1.25rem;
      height: 1.25rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .blog-hero {
        min-height: 400px;
      }

      .hero-content {
        padding: 2rem 1rem;
      }

      .hero-title {
        font-size: 2rem;
      }

      .hero-meta {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .meta-divider {
        display: none;
      }

      .blog-article {
        padding: 2rem 1rem;
      }

      .prose {
        font-size: 1rem;
      }
    }
  </style>

<script>
  // @ts-nocheck
  /** @type {{ [key: string]: string }} */
  const LANGUAGE_EXTENSIONS = {
    javascript: 'js',
    js: 'js',
    typescript: 'ts',
    ts: 'ts',
    jsx: 'jsx',
    tsx: 'tsx',
    html: 'html',
    css: 'css',
    scss: 'scss',
    json: 'json',
    yaml: 'yaml',
    yml: 'yml',
    python: 'py',
    py: 'py',
    ruby: 'rb',
    go: 'go',
    rust: 'rs',
    php: 'php',
    sql: 'sql',
    bash: 'sh',
    sh: 'sh',
    shell: 'sh',
    plaintext: 'txt',
    text: 'txt'
  };

  /** @type {{ [key: string]: string }} */
  const LANGUAGE_NAMES = {
    js: 'JavaScript',
    ts: 'TypeScript',
    jsx: 'JSX',
    tsx: 'TSX',
    html: 'HTML',
    css: 'CSS',
    scss: 'SCSS',
    json: 'JSON',
    yaml: 'YAML',
    yml: 'YAML',
    py: 'Python',
    rb: 'Ruby',
    go: 'Go',
    rs: 'Rust',
    php: 'PHP',
    sql: 'SQL',
    sh: 'Shell',
    txt: 'Text'
  };

  /**
   * @param {HTMLElement} code
   */
  const getLanguageInfo = (code) => {
    const classList = Array.from(code.classList ?? []);
    const langClass = classList.find((cls) => typeof cls === 'string' && cls.startsWith('language-'));

    let raw = typeof langClass === 'string' ? langClass.replace('language-', '').toLowerCase() : '';

    if (!raw || raw === 'text') {
      const dataLanguage = code.getAttribute('data-language') || code.getAttribute('data-lang') || code.dataset.lang;
      if (typeof dataLanguage === 'string' && dataLanguage.trim().length > 0) {
        raw = dataLanguage.trim().toLowerCase();
      }
    }

    if (!raw || raw === 'text') {
      const classAttr = code.getAttribute('class') || '';
      const match = classAttr.match(/language-([\w-]+)/i);
      if (match && match[1]) {
        raw = match[1].toLowerCase();
      }
    }

    if (!raw || raw.length === 0) {
      raw = 'text';
    }

    let extension = raw || 'txt';
    if (raw && Object.prototype.hasOwnProperty.call(LANGUAGE_EXTENSIONS, raw)) {
      // @ts-ignore Index signature is satisfied by runtime guard
      extension = LANGUAGE_EXTENSIONS[raw];
    }

    let name = extension.toUpperCase();
    if (extension && Object.prototype.hasOwnProperty.call(LANGUAGE_NAMES, extension)) {
      // @ts-ignore Index signature is satisfied by runtime guard
      name = LANGUAGE_NAMES[extension];
    }

    return { raw, extension, name };
  };

  const attachToolbar = () => {
    const codeBlocks = document.querySelectorAll('pre');
    codeBlocks.forEach((pre, index) => {
      if (!(pre instanceof HTMLElement) || pre.dataset.toolbar === 'ready') {
        return;
      }

      let code = pre.querySelector('code');
      if (!code) {
        const firstChild = pre.firstElementChild;
        if (firstChild && firstChild.tagName === 'DIV') {
          code = firstChild.querySelector('code');
        }
      }

      if (!code || !(code instanceof HTMLElement)) {
        return;
      }

      const info = getLanguageInfo(code);

      if ((!info || info.raw === 'text') && pre.dataset) {
        const preDataLang = pre.dataset.lang || pre.dataset.language;
        const raw = typeof preDataLang === 'string' ? preDataLang.trim().toLowerCase() : '';
        if (raw) {
          info.raw = raw;
          info.extension = LANGUAGE_EXTENSIONS[raw] || raw || 'txt';
          info.name = LANGUAGE_NAMES[info.extension] || info.extension.toUpperCase();
        }
      }

      if (info.raw === 'text') {
        const preClassAttr = pre.getAttribute('class') || '';
        const matchPre = preClassAttr.match(/language-([\w-]+)/i);
        if (matchPre && matchPre[1]) {
          const raw = matchPre[1].toLowerCase();
          info.raw = raw;
          info.extension = LANGUAGE_EXTENSIONS[raw] || raw || 'txt';
          info.name = LANGUAGE_NAMES[info.extension] || info.extension.toUpperCase();
        }
      }

      const { extension, name } = info;

      const toolbar = document.createElement('div');
      toolbar.className = 'code-toolbar';

      const languageLabel = document.createElement('span');
      languageLabel.className = 'code-language';
      languageLabel.textContent = name;
      toolbar.appendChild(languageLabel);

      const actions = document.createElement('div');
      actions.className = 'code-actions';

      const copyButton = document.createElement('button');
      copyButton.type = 'button';
      copyButton.className = 'code-action code-action-copy';
      copyButton.textContent = 'Copy';

      copyButton.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(code.textContent ?? '');
          copyButton.classList.add('is-success');
          const original = copyButton.textContent;
          copyButton.textContent = 'Copied!';
          setTimeout(() => {
            copyButton.classList.remove('is-success');
            copyButton.textContent = original ?? 'Copy';
          }, 1600);
        } catch (error) {
          console.error('Copy failed', error);
          copyButton.textContent = 'Copy failed';
          setTimeout(() => {
            copyButton.textContent = 'Copy';
          }, 1800);
        }
      });

      const downloadButton = document.createElement('button');
      downloadButton.type = 'button';
      downloadButton.className = 'code-action code-action-download';
      downloadButton.textContent = 'Export';

      downloadButton.addEventListener('click', () => {
        const blob = new Blob([code.textContent ?? ''], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        const filename = `snippet-${index + 1}.${extension}`;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      });

      actions.appendChild(copyButton);
      actions.appendChild(downloadButton);
      toolbar.appendChild(actions);

      pre.appendChild(toolbar);
      pre.dataset.toolbar = 'ready';
    });
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', attachToolbar);
  } else {
    attachToolbar();
  }
</script>
</BaseLayout>

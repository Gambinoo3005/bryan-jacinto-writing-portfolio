---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const blogs = (await getCollection("blogs", ({ data }) => !data.draft))
  .sort((a, b) => +b.data.pubDate - +a.data.pubDate);
---

<BaseLayout 
  title="Blogs - Bryan Jacinto" 
  description="Personal thoughts, insights, and stories from Bryan Jacinto on writing, technology, and creativity."
>
  <section class="w-full min-h-screen" style="background-color: var(--section-bg); margin-top: -88px;">
    <div class="mx-auto max-w-6xl px-5 sm:px-6 pt-16 pb-16">
      <!-- Header -->
      <div class="scroll-reveal mb-12 text-center">
        <h1 class="mb-4">Blogs</h1>
        <p class="text-[var(--color-muted)] text-base sm:text-lg max-w-2xl mx-auto">
          Personal thoughts, insights, and stories on writing, technology, and creativity.
        </p>
      </div>

      <!-- Filter Tabs -->
      <div class="filter-tabs mb-10 scroll-reveal">
        <button class="filter-tab active" data-filter="all">All Blogs</button>
        <button class="filter-tab" data-filter="writing">Writing</button>
        <button class="filter-tab" data-filter="seo">SEO</button>
        <button class="filter-tab" data-filter="tech">Tech</button>
      </div>

      <!-- Blog Cards Grid -->
      {blogs.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="blog-grid">
          {blogs.map((blog, index) => (
            <article 
              class="scroll-reveal scroll-reveal-item blog-card group"
              style={`transition-delay: ${index * 0.1}s;`}
              data-type={blog.data.category?.toLowerCase()}
            >
              <a href={`/blogs/${blog.slug}`} class="block h-full">
                <div class="h-full flex flex-col rounded-2xl border border-[var(--color-border)] bg-[var(--color-surface)] overflow-hidden shadow-sm transition-all duration-300 hover:shadow-xl hover:border-[var(--color-link)] hover:-translate-y-1 min-h-[32rem]">
                  
                  <!-- Blog Image -->
                  {blog.data.heroImage ? (
                    <div class="relative w-full h-48 overflow-hidden bg-[var(--surface-glass)]">
                      <img 
                        src={blog.data.heroImage} 
                        alt={blog.data.title}
                        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                        loading="lazy"
                      />
                    </div>
                  ) : (
                    <div class="relative w-full h-48 bg-gradient-to-br from-[var(--color-accent)] to-[var(--color-link)] opacity-20"></div>
                  )}

                  <!-- Blog Content -->
                  <div class="flex-1 flex flex-col p-5">
                    <!-- Category & Date -->
                    <div class="flex items-center gap-2 mb-3 text-xs text-[var(--color-muted)]">
                      {blog.data.category && (
                        <span class="px-2 py-1 rounded-full bg-[var(--surface-glass)] border border-[var(--color-border)] font-medium">
                          {blog.data.category}
                        </span>
                      )}
                      <time datetime={blog.data.pubDate.toISOString()}>
                        {blog.data.pubDate.toLocaleDateString('en-US', { 
                          month: 'short', 
                          day: 'numeric', 
                          year: 'numeric' 
                        })}
                      </time>
                    </div>

                    <!-- Title -->
                    <h2 class="text-lg font-semibold mb-2 text-[var(--color-text)] group-hover:text-[var(--color-link)] transition-colors">
                      {blog.data.title}
                    </h2>

                    <!-- Description -->
                    <p class="text-sm text-[var(--color-muted)] mb-4 flex-1 line-clamp-3">
                      {blog.data.description}
                    </p>

                    <!-- Read More Button -->
                    <div class="flex items-center gap-2 text-sm font-semibold text-[var(--color-link)] group-hover:gap-3 transition-all">
                      <span>Read more</span>
                      <svg class="h-4 w-4 transition-transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"/>
                      </svg>
                    </div>

                    <!-- Tags -->
                    {blog.data.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1.5 mt-4 pt-4 border-t border-[var(--color-border)]">
                        {blog.data.tags.slice(0, 3).map((tag) => (
                          <span class="text-xs px-2 py-0.5 rounded-full bg-[var(--surface-glass)] text-[var(--color-muted)]">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>
      ) : (
        <div class="text-center py-16">
          <p class="text-[var(--color-muted)] text-lg">No blog posts yet. Check back soon!</p>
        </div>
      )}
    </div>
  </section>

  <!-- Scroll reveal animations -->
  <style is:global>
    .scroll-reveal {
      opacity: 0;
      transform: translateY(40px);
      transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    }

    .scroll-reveal.is-visible {
      opacity: 1;
      transform: translateY(0);
    }

    .scroll-reveal-item {
      opacity: 0;
      transform: translateY(30px);
      transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }

    .scroll-reveal.is-visible .scroll-reveal-item {
      opacity: 1;
      transform: translateY(0);
    }

    /* Line clamp utility */
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>

  <style>
    .filter-tabs {
      display: flex;
      justify-content: center;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    .filter-tab {
      background: var(--card-bg);
      border: 1px solid var(--color-border);
      color: var(--color-text);
      padding: 0.75rem 1.5rem;
      border-radius: 2rem;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .filter-tab:hover {
      background: var(--color-surface);
      border-color: var(--color-accent);
      transform: translateY(-1px);
    }

    .filter-tab.active {
      background: var(--color-link);
      color: var(--color-bg);
      border-color: var(--color-link);
    }

    .blog-card {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .blog-card h2 {
      font-size: 1.125rem;
      line-height: 1.5;
      font-weight: 600;
    }
  </style>

  <!-- Scroll reveal script -->
  <script>
    const observerOptions = {
      root: null,
      rootMargin: '0px 0px -100px 0px',
      threshold: 0.15
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
        }
      });
    }, observerOptions);

    document.addEventListener('DOMContentLoaded', () => {
      const revealElements = document.querySelectorAll('.scroll-reveal');
      revealElements.forEach(el => observer.observe(el));

      const filterTabs = document.querySelectorAll<HTMLButtonElement>('.filter-tab');
      const blogCards = document.querySelectorAll<HTMLElement>('#blog-grid article');

      filterTabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const filter = tab.dataset.filter ?? 'all';

          filterTabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');

          blogCards.forEach(card => {
            const cardType = card.getAttribute('data-type');
            if (filter === 'all' || cardType === filter) {
              card.style.display = 'block';
              card.style.animation = 'fadeInUp 0.3s ease forwards';
            } else {
              card.style.display = 'none';
            }
          });
        });
      });
    });
  </script>
</BaseLayout>

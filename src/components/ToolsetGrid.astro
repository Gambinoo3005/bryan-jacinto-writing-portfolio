---
export interface Props {
  tools: Array<{
    id: string;
    name: string;
    category: string;
    icon?: string;
  }>;
}

const { tools } = Astro.props;

// Group tools by category
const toolsByCategory = tools.reduce((acc, tool) => {
  if (!acc[tool.category]) {
    acc[tool.category] = [];
  }
  acc[tool.category].push(tool);
  return acc;
}, {} as Record<string, typeof tools>);

const categories = Object.keys(toolsByCategory);
---

<div class="toolset-grid" id="toolset-grid">
  <div class="toolset-container">
    {categories.map((category, index) => (
      <div class={`toolset-category scroll-reveal-category ${index % 2 === 0 ? 'slide-from-left' : 'slide-from-right'}`} data-delay={index * 0.15}>
        <h3>{category}</h3>
        <div class="tools-grid">
          {toolsByCategory[category].map((tool) => (
            <div class="tool-item" data-tool-id={tool.id}>
              <div class="tool-icon">
                {tool.icon ? (
                  <img 
                    src={`/toolset-icons/${tool.icon}`} 
                    alt={`${tool.name} icon`}
                    loading="lazy"
                  />
                ) : (
                  <div class="tool-icon-placeholder">
                    {tool.name.charAt(0).toUpperCase()}
                  </div>
                )}
              </div>
              <span class="tool-name">{tool.name}</span>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .toolset-grid {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0;
  }


  .toolset-container {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .toolset-category {
    background-color: var(--card-bg);
    background-image: 
      linear-gradient(to bottom, 
        rgba(255, 255, 255, 0.02) 0%, 
        transparent 50%
      );
    border: 1px solid var(--color-border);
    border-radius: 16px;
    padding: 2rem;
    transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    position: relative;
    z-index: 0;
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.05),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
  }
  
  .dark .toolset-category {
    background-image: 
      linear-gradient(to bottom, 
        rgba(255, 255, 255, 0.03) 0%, 
        transparent 50%
      );
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.03) inset;
  }
  
  /* Subtle gradient border effect */
  .toolset-category::before {
    content: '';
    position: absolute;
    inset: -1px;
    border-radius: 16px;
    padding: 1px;
    background: linear-gradient(135deg, 
      var(--color-border) 0%, 
      transparent 50%,
      var(--color-border) 100%
    );
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .toolset-category:hover::before {
    opacity: 1;
  }

  .toolset-category:hover {
    transform: translateY(-4px) scale(1.005);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.12),
      0 2px 8px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(0, 0, 0, 0.03) inset;
  }
  
  .dark .toolset-category:hover {
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.5),
      0 2px 8px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.05) inset;
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-heading);
    margin-bottom: 1.5rem;
    text-align: center;
    position: relative;
    z-index: 1;
  }


  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1.5rem;
    justify-items: center;
    margin-top: 0.5rem;
  }

  .tool-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-radius: 12px;
    transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
    min-width: 100px;
    position: relative;
    z-index: 1;
    overflow: hidden;
    border: 1px solid transparent;
  }

  .tool-item:hover {
    background-color: var(--surface-glass);
    border-color: var(--color-border);
    box-shadow: 
      0 6px 20px rgba(0, 0, 0, 0.1),
      0 2px 6px rgba(0, 0, 0, 0.06),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
    transform: translateY(-4px) scale(1.05);
    z-index: 2;
  }
  
  .dark .tool-item:hover {
    box-shadow: 
      0 6px 20px rgba(0, 0, 0, 0.4),
      0 2px 6px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.04) inset;
  }

  .tool-icon {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    background: linear-gradient(135deg, 
      rgba(0, 0, 0, 0.02) 0%, 
      transparent 100%
    );
    border: 1px solid rgba(0, 0, 0, 0.04);
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease;
    backdrop-filter: blur(8px);
  }
  
  .dark .tool-icon {
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.03) 0%, 
      transparent 100%
    );
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .tool-item:hover .tool-icon {
    transform: scale(1.1) rotate(5deg);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
  }
  
  .dark .tool-item:hover .tool-icon {
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.03) inset;
  }

  .tool-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 8px;
    transition: transform 0.3s ease;
  }
  
  .tool-item:hover .tool-icon img {
    transform: scale(1.05);
  }


  .tool-icon-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-text);
    background-color: var(--color-muted);
    color: var(--color-surface);
  }

  .tool-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text);
    text-align: center;
    line-height: 1.3;
    transition: all 0.3s ease;
  }
  
  .tool-item:hover .tool-name {
    color: var(--color-heading);
    font-weight: 600;
    transform: translateY(-2px);
  }

  /* Responsive design */
  @media (max-width: 768px) {

    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 1rem;
    }

    .tool-item {
      padding: 0.75rem;
    }

    .tool-icon {
      width: 56px;
      height: 56px;
    }

    .tool-name {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    }

    .tool-icon {
      width: 48px;
      height: 48px;
    }

    .tool-name {
      font-size: 0.75rem;
    }
  }

</style>

<script>
  const initToolsetGsap = async () => {
    const categories = document.querySelectorAll<HTMLElement>('.scroll-reveal-category');
    if (!categories.length) return;

    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
    if (prefersReducedMotion.matches) {
      categories.forEach((card) => {
        card.style.opacity = '1';
        card.style.transform = 'none';
      });
      return;
    }

    try {
      const [{ gsap }, { ScrollTrigger }] = await Promise.all([
        import('gsap'),
        import('gsap/ScrollTrigger'),
      ]);

      gsap.registerPlugin(ScrollTrigger);

      categories.forEach((card, index) => {
        const delay = Number(card.dataset.delay ?? 0);
        const fromX = index % 2 === 0 ? -80 : 80;

        gsap.fromTo(card, { opacity: 0, x: fromX }, {
            opacity: 1,
            x: 0,
            duration: 0.8,
            ease: 'power3.out',
            delay,
            scrollTrigger: {
              trigger: card,
              start: 'top 80%',
              once: false,
            },
          });
      });
    } catch (error) {
      console.warn('Toolset animation failed to load GSAP', error);
      categories.forEach((card) => {
        card.style.opacity = '1';
        card.style.transform = 'none';
      });
    }
  };

  const start = () => {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initToolsetGsap, { once: true });
    } else {
      initToolsetGsap();
    }
  };

  start();
</script>

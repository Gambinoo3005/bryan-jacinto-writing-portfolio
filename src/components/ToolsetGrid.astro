---
export interface Props {
  tools: Array<{
    id: string;
    name: string;
    category: string;
    icon?: string;
  }>;
}

const { tools } = Astro.props;

// Group tools by category
const toolsByCategory = tools.reduce((acc, tool) => {
  if (!acc[tool.category]) {
    acc[tool.category] = [];
  }
  acc[tool.category].push(tool);
  return acc;
}, {} as Record<string, typeof tools>);

const categories = Object.keys(toolsByCategory);
---

<div class="toolset-grid" id="toolset-grid">
  <div class="toolset-container">
    {categories.map((category, index) => (
      <div class={`toolset-category scroll-reveal-category ${index % 2 === 0 ? 'slide-from-left' : 'slide-from-right'}`} data-delay={index * 0.15}>
        <h3>{category}</h3>
        <div class="tools-grid">
          {toolsByCategory[category].map((tool) => (
            <div class="tool-item" data-tool-id={tool.id}>
              <div class="tool-icon">
                {tool.icon ? (
                  <img 
                    src={`/toolset-icons/${tool.icon}`} 
                    alt={`${tool.name} icon`}
                    loading="lazy"
                  />
                ) : (
                  <div class="tool-icon-placeholder">
                    {tool.name.charAt(0).toUpperCase()}
                  </div>
                )}
              </div>
              <span class="tool-name">{tool.name}</span>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .toolset-grid {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem 2rem 1rem;
  }


  .toolset-container {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .toolset-category {
    background-color: var(--card-bg);
    border: 1px solid var(--color-border);
    border-radius: 16px;
    padding: 2rem;
    transition: all 0.3s ease;
  }

  /* Scroll reveal animations for category cards */
  .scroll-reveal-category {
    opacity: 0;
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .scroll-reveal-category.slide-from-left {
    transform: translateX(-80px);
  }

  .scroll-reveal-category.slide-from-right {
    transform: translateX(80px);
  }

  .scroll-reveal-category.is-visible {
    opacity: 1;
    transform: translateX(0);
  }

  .toolset-category:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-heading);
    margin-bottom: 1.5rem;
    text-align: center;
  }


  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1.5rem;
    justify-items: center;
  }

  .tool-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-radius: 12px;
    transition: all 0.3s ease;
    cursor: pointer;
    min-width: 100px;
  }

  .tool-item:hover {
    background-color: var(--surface-glass);
    transform: translateY(-2px);
  }

  .tool-icon {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    background-color: transparent;
    border: none;
    overflow: hidden;
  }

  .tool-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 4px;
  }


  .tool-icon-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-text);
    background-color: var(--color-muted);
    color: var(--color-surface);
  }

  .tool-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text);
    text-align: center;
    line-height: 1.3;
  }

  /* Responsive design */
  @media (max-width: 768px) {

    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 1rem;
    }

    .tool-item {
      padding: 0.75rem;
    }

    .tool-icon {
      width: 56px;
      height: 56px;
    }

    .tool-name {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    }

    .tool-icon {
      width: 48px;
      height: 48px;
    }

    .tool-name {
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Intersection Observer for category card animations
  const categoryObserverOptions = {
    root: null,
    rootMargin: '-5% 0px -5% 0px', // Trigger when element is in center 90% of viewport
    threshold: 0.2 // Trigger when 20% of element is visible
  };

  const categoryObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Always animate when entering viewport (works for both scroll directions)
        const delayAttr = entry.target.getAttribute('data-delay');
        const delay = delayAttr !== null ? parseFloat(delayAttr) : 0;
        setTimeout(() => {
          entry.target.classList.add('is-visible');
        }, delay * 1000);
      } else {
        // Remove is-visible class when element leaves viewport
        // This allows re-animation when scrolling back up
        entry.target.classList.remove('is-visible');
      }
    });
  }, categoryObserverOptions);

  // Observe all category cards when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const categoryCards = document.querySelectorAll('.scroll-reveal-category');
    categoryCards.forEach(card => categoryObserver.observe(card));
  });
</script>

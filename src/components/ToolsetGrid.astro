---
export interface Props {
  tools: Array<{
    id: string;
    name: string;
    category: string;
    icon?: string;
  }>;
}

const { tools } = Astro.props;

// Group tools by category
const toolsByCategory = tools.reduce((acc, tool) => {
  if (!acc[tool.category]) {
    acc[tool.category] = [];
  }
  acc[tool.category].push(tool);
  return acc;
}, {} as Record<string, typeof tools>);

const categories = Object.keys(toolsByCategory);
---

<div class="toolset-grid" id="toolset-grid">
  <div class="toolset-container">
    {categories.map((category, index) => (
      <div class={`toolset-category scroll-reveal-category ${index % 2 === 0 ? 'slide-from-left' : 'slide-from-right'}`} data-delay={index * 0.15}>
        <h3>{category}</h3>
        <div class="tools-grid">
          {toolsByCategory[category].map((tool) => (
            <div class="tool-item" data-tool-id={tool.id}>
              <div class="tool-icon">
                {tool.icon ? (
                  <img 
                    src={`/toolset-icons/${tool.icon}`} 
                    alt={`${tool.name} icon`}
                    loading="lazy"
                  />
                ) : (
                  <div class="tool-icon-placeholder">
                    {tool.name.charAt(0).toUpperCase()}
                  </div>
                )}
              </div>
              <span class="tool-name">{tool.name}</span>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .toolset-grid {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0;
  }


  .toolset-container {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .toolset-category {
    background-color: var(--card-bg);
    background-image: 
      linear-gradient(to bottom, 
        rgba(255, 255, 255, 0.02) 0%, 
        transparent 50%
      );
    border: 1px solid var(--color-border);
    border-radius: 16px;
    padding: 2rem;
    transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    position: relative;
    z-index: 0;
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.05),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
  }
  
  .dark .toolset-category {
    background-image: 
      linear-gradient(to bottom, 
        rgba(255, 255, 255, 0.03) 0%, 
        transparent 50%
      );
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.03) inset;
  }
  
  /* Subtle gradient border effect */
  .toolset-category::before {
    content: '';
    position: absolute;
    inset: -1px;
    border-radius: 16px;
    padding: 1px;
    background: linear-gradient(135deg, 
      var(--color-border) 0%, 
      transparent 50%,
      var(--color-border) 100%
    );
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .toolset-category:hover::before {
    opacity: 1;
  }

  /* Scroll reveal animations for category cards */
  .scroll-reveal-category {
    opacity: 0;
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .scroll-reveal-category.slide-from-left {
    transform: translateX(-80px);
  }

  .scroll-reveal-category.slide-from-right {
    transform: translateX(80px);
  }

  .scroll-reveal-category.is-visible {
    opacity: 1;
    transform: translateX(0);
  }

  .toolset-category:hover {
    transform: translateY(-4px) scale(1.005);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.12),
      0 2px 8px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(0, 0, 0, 0.03) inset;
  }
  
  .dark .toolset-category:hover {
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.5),
      0 2px 8px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.05) inset;
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-heading);
    margin-bottom: 1.5rem;
    text-align: center;
    position: relative;
    z-index: 1;
  }


  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1.5rem;
    justify-items: center;
    margin-top: 0.5rem;
  }

  .tool-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-radius: 12px;
    transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
    min-width: 100px;
    position: relative;
    z-index: 1;
    overflow: hidden;
    border: 1px solid transparent;
  }

  .tool-item:hover {
    background-color: var(--surface-glass);
    border-color: var(--color-border);
    box-shadow: 
      0 6px 20px rgba(0, 0, 0, 0.1),
      0 2px 6px rgba(0, 0, 0, 0.06),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
    transform: translateY(-4px) scale(1.05);
    z-index: 2;
  }
  
  .dark .tool-item:hover {
    box-shadow: 
      0 6px 20px rgba(0, 0, 0, 0.4),
      0 2px 6px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.04) inset;
  }

  .tool-icon {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    background: linear-gradient(135deg, 
      rgba(0, 0, 0, 0.02) 0%, 
      transparent 100%
    );
    border: 1px solid rgba(0, 0, 0, 0.04);
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease;
    backdrop-filter: blur(8px);
  }
  
  .dark .tool-icon {
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.03) 0%, 
      transparent 100%
    );
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .tool-item:hover .tool-icon {
    transform: scale(1.1) rotate(5deg);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(0, 0, 0, 0.02) inset;
  }
  
  .dark .tool-item:hover .tool-icon {
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.03) inset;
  }

  .tool-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 8px;
    transition: transform 0.3s ease;
  }
  
  .tool-item:hover .tool-icon img {
    transform: scale(1.05);
  }


  .tool-icon-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-text);
    background-color: var(--color-muted);
    color: var(--color-surface);
  }

  .tool-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text);
    text-align: center;
    line-height: 1.3;
    transition: all 0.3s ease;
  }
  
  .tool-item:hover .tool-name {
    color: var(--color-heading);
    font-weight: 600;
    transform: translateY(-2px);
  }

  /* Responsive design */
  @media (max-width: 768px) {

    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 1rem;
    }

    .tool-item {
      padding: 0.75rem;
    }

    .tool-icon {
      width: 56px;
      height: 56px;
    }

    .tool-name {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .tools-grid {
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    }

    .tool-icon {
      width: 48px;
      height: 48px;
    }

    .tool-name {
      font-size: 0.75rem;
    }
  }

</style>

<script>
  // Enhanced Intersection Observer for reliable category animations
  const categoryObserverOptions = {
    root: null,
    rootMargin: '0px 0px -10% 0px', // Trigger when element is 10% from bottom of viewport
    threshold: [0.1, 0.3] // Multiple thresholds for better reliability
  };

  // Track active timeouts to prevent stacking
  const activeTimeouts = new WeakMap();

  const categoryObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const target = entry.target;
      
      if (entry.isIntersecting && entry.intersectionRatio >= 0.1) {
        // Clear any existing timeout for this element
        if (activeTimeouts.has(target)) {
          clearTimeout(activeTimeouts.get(target));
          activeTimeouts.delete(target);
        }

        // Only animate if not already visible
        if (!target.classList.contains('is-visible')) {
          const delayAttr = target.getAttribute('data-delay');
          const delay = delayAttr !== null ? parseFloat(delayAttr) : 0;
          
          const timeoutId = setTimeout(() => {
            target.classList.add('is-visible');
            activeTimeouts.delete(target);
          }, delay * 1000);
          
          activeTimeouts.set(target, timeoutId);
        }
      } else if (!entry.isIntersecting) {
        // Clear timeout and reset animation when out of view
        if (activeTimeouts.has(target)) {
          clearTimeout(activeTimeouts.get(target));
          activeTimeouts.delete(target);
        }
        target.classList.remove('is-visible');
      }
    });
  }, categoryObserverOptions);

  // Initialize animations with better reliability
  const initToolsetAnimations = () => {
    const categoryCards = document.querySelectorAll('.scroll-reveal-category');
    console.log('🔍 Initializing toolset animations for', categoryCards.length, 'categories');
    
    categoryCards.forEach((card, index) => {
      const cardElement = card;
      const categoryName = cardElement.querySelector('h3')?.textContent || `Category ${index}`;
      
      // Check if element is already in viewport on page load
      const rect = cardElement.getBoundingClientRect();
      const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;
      
      if (isInViewport) {
        // Element is already visible, animate it immediately
        const delayAttr = cardElement.getAttribute('data-delay');
        const delay = delayAttr !== null ? parseFloat(delayAttr) : 0;
        
        setTimeout(() => {
          cardElement.classList.add('is-visible');
          console.log(`✅ Immediate animation for: ${categoryName}`);
        }, delay * 1000);
      } else {
        // Element is not visible, observe it
        categoryObserver.observe(cardElement);
        console.log(`👀 Observing: ${categoryName}`);
      }
    });
  };

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initToolsetAnimations);
  } else {
    initToolsetAnimations();
  }
</script>

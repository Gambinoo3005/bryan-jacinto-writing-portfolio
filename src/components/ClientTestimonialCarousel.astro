---
export interface Props {
  testimonials: Array<{
    id: string;
    name: string;
    role: string;
    company: string;
    avatar?: string;
    content: string;
    project?: string;
    results?: string;
  }>;
  autoplay?: boolean;
  autoplayInterval?: number;
  showDots?: boolean;
  showArrows?: boolean;
}

const { 
  testimonials, 
  autoplay = true, 
  autoplayInterval = 5000, 
  showDots = true, 
  showArrows = true 
} = Astro.props;
---

<div class="testimonial-carousel" id="testimonial-carousel">
  <div class="carousel-container">
    <div class="carousel-track" id="carousel-track">
      {testimonials.map((testimonial, index) => (
        <div 
          class={`testimonial-slide ${index === 0 ? 'active' : ''}`}
          data-index={index}
          data-testimonial-id={testimonial.id}
        >
          <div class="testimonial-card">
            <div class="testimonial-header">
              <div class="client-info">
                {testimonial.avatar && (
                  <div class="client-avatar">
                    <img src={testimonial.avatar} alt={testimonial.name} />
                  </div>
                )}
                <div class="client-details">
                  <h3 class="client-name">{testimonial.name}</h3>
                  <p class="client-role">{testimonial.role}</p>
                  <p class="client-company">{testimonial.company}</p>
                </div>
              </div>
              
            </div>

            <blockquote class="testimonial-content">
              <p>"{testimonial.content}"</p>
            </blockquote>

          </div>
        </div>
      ))}
    </div>

  </div>

  {showArrows && (
    <div class="carousel-controls">
      <button class="carousel-arrow carousel-prev" id="carousel-prev" aria-label="Previous testimonial">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      
      <div class="carousel-indicator">
        <span class="current-position">1</span>
        <span class="nav-separator">/</span>
        <span class="total-testimonials">{testimonials.length}</span>
      </div>
      
      <button class="carousel-arrow carousel-next" id="carousel-next" aria-label="Next testimonial">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
  )}

  {showDots && (
    <div class="carousel-dots" id="carousel-dots">
      {testimonials.map((_, index) => (
        <button 
          class={`carousel-dot ${index === 0 ? 'active' : ''}`}
          data-index={index}
          aria-label={`Go to testimonial ${index + 1}`}
        ></button>
      ))}
    </div>
  )}

  <!-- Carousel Stats -->
</div>

<script>
  class ClientTestimonialCarousel {
    private track: HTMLElement;
    private slides: NodeListOf<HTMLElement>;
    private prevButton: HTMLButtonElement;
    private nextButton: HTMLButtonElement;
    private dots: NodeListOf<HTMLButtonElement>;
    private currentIndex: number = 0;
    private totalSlides: number;
    private autoplayTimer: number | null = null;
    private isTransitioning: boolean = false;

    constructor(container: HTMLElement) {
      this.track = container.querySelector('#carousel-track') as HTMLElement;
      this.slides = container.querySelectorAll('.testimonial-slide');
      this.prevButton = container.querySelector('#carousel-prev') as HTMLButtonElement;
      this.nextButton = container.querySelector('#carousel-next') as HTMLButtonElement;
      this.dots = container.querySelectorAll('.carousel-dot');
      this.totalSlides = this.slides.length;
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.startAutoplay();
      this.updateCarousel();
    }

    setupEventListeners() {
      // Arrow navigation
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.previousSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }

      // Dot navigation
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previousSlide();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.nextSlide();
        }
      });

      // Touch/swipe support
      let startX = 0;
      let startY = 0;
      
      this.track.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      });
      
      this.track.addEventListener('touchend', (e) => {
        if (!startX || !startY) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        
        const diffX = startX - endX;
        const diffY = startY - endY;
        
        // Only trigger if horizontal swipe is more significant than vertical
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          if (diffX > 0) {
            this.nextSlide();
          } else {
            this.previousSlide();
          }
        }
        
        startX = 0;
        startY = 0;
      });

      // Pause autoplay on hover
      this.track.addEventListener('mouseenter', () => this.pauseAutoplay());
      this.track.addEventListener('mouseleave', () => this.startAutoplay());
    }

    nextSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex = (this.currentIndex + 1) % this.totalSlides;
      this.updateCarousel();
    }

    previousSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex = this.currentIndex === 0 ? this.totalSlides - 1 : this.currentIndex - 1;
      this.updateCarousel();
    }

    goToSlide(index: number) {
      if (this.isTransitioning || index === this.currentIndex) return;
      
      this.currentIndex = index;
      this.updateCarousel();
    }

    updateCarousel() {
      this.isTransitioning = true;
      
      // Update slides
      this.slides.forEach((slide, index) => {
        slide.classList.remove('active', 'prev', 'next');
        
        if (index === this.currentIndex) {
          slide.classList.add('active');
        } else if (index === (this.currentIndex - 1 + this.totalSlides) % this.totalSlides) {
          slide.classList.add('prev');
        } else if (index === (this.currentIndex + 1) % this.totalSlides) {
          slide.classList.add('next');
        }
      });

      // Update dots
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });

      // Update position indicator
      const currentPositionElement = document.querySelector('.current-position');
      if (currentPositionElement) {
        currentPositionElement.textContent = (this.currentIndex + 1).toString();
      }

      // Update arrow states
      if (this.prevButton && this.nextButton) {
        this.prevButton.disabled = false;
        this.nextButton.disabled = false;
      }

      // Reset transition flag
      setTimeout(() => {
        this.isTransitioning = false;
      }, 500);
    }

    startAutoplay() {
      if (this.totalSlides <= 1) return;
      
      this.pauseAutoplay();
      this.autoplayTimer = window.setInterval(() => {
        this.nextSlide();
      }, 5000);
    }

    pauseAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }
  }

  // Initialize all carousels
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.testimonial-carousel');
    carousels.forEach(carousel => {
      new ClientTestimonialCarousel(carousel as HTMLElement);
    });
  });
</script>

<style>
  .testimonial-carousel {
    max-width: 900px;
    margin: 0 auto;
    padding: 1rem;
    margin-top: -30px;
  }

  .carousel-container {
    position: relative;
    background-color: var(--card-bg);
    border: 1px solid var(--color-border);
    border-radius: 1rem;
    padding: 1.5rem;
    overflow: hidden;
    contain: layout style paint;
  }

  .carousel-track {
    position: relative;
    min-height: 250px;
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .carousel-track {
      min-height: 350px;
      touch-action: pan-y pinch-zoom;
    }
  }

  .testimonial-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    will-change: opacity, transform;
    backface-visibility: hidden;
  }

  .testimonial-slide.active {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
  }

  .testimonial-slide.prev {
    opacity: 0;
    transform: translateX(-100%);
  }

  .testimonial-slide.next {
    opacity: 0;
    transform: translateX(100%);
  }

  .testimonial-card {
    text-align: center;
    max-width: 700px;
    margin: 0 auto;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  .testimonial-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.75rem;
  }

  .client-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
  }

  .client-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid var(--color-border);
  }

  .client-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .client-details {
    text-align: center;
  }

  .client-name {
    font-size: 1.375rem;
    font-weight: 700;
    color: var(--color-heading);
    margin: 0 0 0.5rem 0;
  }

  .client-role {
    font-size: 1.125rem;
    color: var(--color-text);
    margin: 0 0 0.375rem 0;
  }

  .client-company {
    font-size: 1rem;
    color: var(--color-muted);
    margin: 0;
  }


  .testimonial-content {
    margin: 0 0 1.75rem 0;
    padding: 0;
    border: none;
  }

  .testimonial-content p {
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--color-text);
    font-style: italic;
    margin: 0;
  }


  .carousel-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    z-index: 5;
    position: relative;
    margin-top: 2rem;
  }

  /* Hide navigation arrows on mobile */
  @media (max-width: 768px) {
    .carousel-controls {
      display: none;
    }
  }

  .carousel-arrow {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 52px;
    height: 52px;
    border-radius: 50%;
    background-color: var(--card-bg);
    border: 2px solid var(--color-border);
    color: var(--color-text);
    box-shadow: none;
    cursor: pointer;
    transition: all 250ms cubic-bezier(0.34, 1.56, 0.64, 1);
    position: relative;
    overflow: hidden;
    pointer-events: auto;
  }

  .carousel-arrow::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at center, var(--color-link) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 250ms ease;
  }

  .carousel-arrow:hover:not(:disabled) {
    background-color: var(--surface-glass-strong);
    border-color: var(--color-link);
    color: var(--color-link);
    transform: translateY(-2px) scale(1.05);
    box-shadow: none;
  }

  .carousel-arrow:hover:not(:disabled)::before {
    opacity: 0.06;
  }

  .carousel-arrow:active:not(:disabled) {
    transform: translateY(0) scale(0.98);
    box-shadow: none;
  }

  .carousel-arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: scale(0.95);
  }

  .carousel-arrow:focus-visible {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-bg), 0 0 0 5px var(--color-link);
  }

  .carousel-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--surface-glass);
    border: 1px solid var(--color-border);
    border-radius: 2rem;
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--color-text);
    box-shadow: none;
    user-select: none;
  }

  .current-position {
    color: var(--color-link);
    font-size: 1.1rem;
  }

  .nav-separator {
    opacity: 0.4;
  }

  .total-testimonials {
    opacity: 0.6;
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .carousel-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: var(--color-border);
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-dot:hover {
    background-color: var(--color-muted);
    transform: scale(1.2);
  }

  .carousel-dot.active {
    background-color: var(--color-link);
    transform: scale(1.3);
  }


  @media (max-width: 768px) {
    .testimonial-carousel {
      padding: 1rem;
    }

    .carousel-container {
      padding: 1.5rem;
    }


    .testimonial-header {
      flex-direction: column;
      gap: 0.75rem;
    }

    .client-avatar {
      width: 60px;
      height: 60px;
    }

    .testimonial-content p {
      font-size: 1rem;
    }

    .carousel-arrow {
      width: 48px;
      height: 48px;
    }

    .carousel-controls {
      gap: 1.25rem;
    }

    .carousel-indicator {
      padding: 0.625rem 1rem;
      font-size: 0.9rem;
    }

  }

  @media (max-width: 480px) {
    .carousel-arrow {
      width: 44px;
      height: 44px;
    }

    .carousel-arrow svg {
      width: 20px;
      height: 20px;
    }

    .carousel-controls {
      gap: 1rem;
    }

    .carousel-indicator {
      padding: 0.5rem 0.875rem;
      font-size: 0.85rem;
    }
  }

</style>

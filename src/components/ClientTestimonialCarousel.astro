---
export interface Props {
  testimonials: Array<{
    id: string;
    name: string;
    role: string;
    company: string;
    avatar?: string;
    content: string;
    rating: number;
    project?: string;
    results?: string;
  }>;
  autoplay?: boolean;
  autoplayInterval?: number;
  showDots?: boolean;
  showArrows?: boolean;
}

const { 
  testimonials, 
  autoplay = true, 
  autoplayInterval = 5000, 
  showDots = true, 
  showArrows = true 
} = Astro.props;
---

<div class="testimonial-carousel" id="testimonial-carousel">
  <div class="carousel-container">
    <div class="carousel-track" id="carousel-track">
      {testimonials.map((testimonial, index) => (
        <div 
          class={`testimonial-slide ${index === 0 ? 'active' : ''}`}
          data-index={index}
          data-testimonial-id={testimonial.id}
        >
          <div class="testimonial-card">
            <div class="testimonial-header">
              <div class="client-info">
                {testimonial.avatar && (
                  <div class="client-avatar">
                    <img src={testimonial.avatar} alt={testimonial.name} />
                  </div>
                )}
                <div class="client-details">
                  <h3 class="client-name">{testimonial.name}</h3>
                  <p class="client-role">{testimonial.role}</p>
                  <p class="client-company">{testimonial.company}</p>
                </div>
              </div>
              
              <div class="testimonial-rating">
                {Array.from({ length: 5 }, (_, i) => (
                  <svg 
                    class={`star ${i < testimonial.rating ? 'filled' : ''}`}
                    width="20" 
                    height="20" 
                    viewBox="0 0 20 20" 
                    fill="currentColor"
                  >
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                  </svg>
                ))}
              </div>
            </div>

            <blockquote class="testimonial-content">
              <p>"{testimonial.content}"</p>
            </blockquote>

          </div>
        </div>
      ))}
    </div>

    {showArrows && (
      <div class="carousel-controls">
        <button class="carousel-arrow carousel-prev" id="carousel-prev" aria-label="Previous testimonial">
          <svg width="24" height="24" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"/>
          </svg>
        </button>
        
        <button class="carousel-arrow carousel-next" id="carousel-next" aria-label="Next testimonial">
          <svg width="24" height="24" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"/>
          </svg>
        </button>
      </div>
    )}

    {showDots && (
      <div class="carousel-dots" id="carousel-dots">
        {testimonials.map((_, index) => (
          <button 
            class={`carousel-dot ${index === 0 ? 'active' : ''}`}
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    )}
  </div>

  <!-- Carousel Stats -->
  <div class="carousel-stats">
    <div class="stat">
      <span class="stat-number">{testimonials.length}</span>
      <span class="stat-label">Happy Clients</span>
    </div>
    <div class="stat">
      <span class="stat-number">{testimonials.reduce((acc, t) => acc + t.rating, 0) / testimonials.length}</span>
      <span class="stat-label">Average Rating</span>
    </div>
    <div class="stat">
      <span class="stat-number">100%</span>
      <span class="stat-label">Satisfaction</span>
    </div>
  </div>
</div>

<script>
  class ClientTestimonialCarousel {
    private track: HTMLElement;
    private slides: NodeListOf<HTMLElement>;
    private prevButton: HTMLButtonElement;
    private nextButton: HTMLButtonElement;
    private dots: NodeListOf<HTMLButtonElement>;
    private currentIndex: number = 0;
    private totalSlides: number;
    private autoplayTimer: number | null = null;
    private isTransitioning: boolean = false;

    constructor(container: HTMLElement) {
      this.track = container.querySelector('#carousel-track') as HTMLElement;
      this.slides = container.querySelectorAll('.testimonial-slide');
      this.prevButton = container.querySelector('#carousel-prev') as HTMLButtonElement;
      this.nextButton = container.querySelector('#carousel-next') as HTMLButtonElement;
      this.dots = container.querySelectorAll('.carousel-dot');
      this.totalSlides = this.slides.length;
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.startAutoplay();
      this.updateCarousel();
    }

    setupEventListeners() {
      // Arrow navigation
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.previousSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }

      // Dot navigation
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previousSlide();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.nextSlide();
        }
      });

      // Touch/swipe support
      let startX = 0;
      let startY = 0;
      
      this.track.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      });
      
      this.track.addEventListener('touchend', (e) => {
        if (!startX || !startY) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        
        const diffX = startX - endX;
        const diffY = startY - endY;
        
        // Only trigger if horizontal swipe is more significant than vertical
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          if (diffX > 0) {
            this.nextSlide();
          } else {
            this.previousSlide();
          }
        }
        
        startX = 0;
        startY = 0;
      });

      // Pause autoplay on hover
      this.track.addEventListener('mouseenter', () => this.pauseAutoplay());
      this.track.addEventListener('mouseleave', () => this.startAutoplay());
    }

    nextSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex = (this.currentIndex + 1) % this.totalSlides;
      this.updateCarousel();
    }

    previousSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex = this.currentIndex === 0 ? this.totalSlides - 1 : this.currentIndex - 1;
      this.updateCarousel();
    }

    goToSlide(index: number) {
      if (this.isTransitioning || index === this.currentIndex) return;
      
      this.currentIndex = index;
      this.updateCarousel();
    }

    updateCarousel() {
      this.isTransitioning = true;
      
      // Update slides
      this.slides.forEach((slide, index) => {
        slide.classList.remove('active', 'prev', 'next');
        
        if (index === this.currentIndex) {
          slide.classList.add('active');
        } else if (index === (this.currentIndex - 1 + this.totalSlides) % this.totalSlides) {
          slide.classList.add('prev');
        } else if (index === (this.currentIndex + 1) % this.totalSlides) {
          slide.classList.add('next');
        }
      });

      // Update dots
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });

      // Update arrow states
      if (this.prevButton && this.nextButton) {
        this.prevButton.disabled = false;
        this.nextButton.disabled = false;
      }

      // Reset transition flag
      setTimeout(() => {
        this.isTransitioning = false;
      }, 500);
    }

    startAutoplay() {
      if (this.totalSlides <= 1) return;
      
      this.pauseAutoplay();
      this.autoplayTimer = window.setInterval(() => {
        this.nextSlide();
      }, 5000);
    }

    pauseAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }
  }

  // Initialize all carousels
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.testimonial-carousel');
    carousels.forEach(carousel => {
      new ClientTestimonialCarousel(carousel as HTMLElement);
    });
  });
</script>

<style>
  .testimonial-carousel {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }

  .carousel-container {
    position: relative;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 1.5rem;
    padding: 2rem;
    overflow: hidden;
  }

  .carousel-track {
    position: relative;
    min-height: 300px;
  }

  .testimonial-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
  }

  .testimonial-slide.active {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
  }

  .testimonial-slide.prev {
    opacity: 0.3;
    transform: translateX(-100%);
  }

  .testimonial-slide.next {
    opacity: 0.3;
    transform: translateX(100%);
  }

  .testimonial-card {
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }

  .testimonial-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .client-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .client-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid var(--color-border);
  }

  .client-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .client-details {
    text-align: center;
  }

  .client-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-heading);
    margin: 0 0 0.25rem 0;
  }

  .client-role {
    font-size: 1rem;
    color: var(--color-text);
    margin: 0 0 0.25rem 0;
  }

  .client-company {
    font-size: 0.875rem;
    color: var(--color-muted);
    margin: 0;
  }

  .testimonial-rating {
    display: flex;
    gap: 0.25rem;
    justify-content: center;
  }

  .star {
    color: #e5e7eb;
    transition: color 0.2s ease;
  }

  .star.filled {
    color: #fbbf24;
  }

  .testimonial-content {
    margin: 0 0 2rem 0;
    padding: 0;
    border: none;
  }

  .testimonial-content p {
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--color-text);
    font-style: italic;
    margin: 0;
  }


  .carousel-controls {
    position: absolute;
    top: 50%;
    left: 2rem;
    right: 2rem;
    display: flex;
    justify-content: space-between;
    pointer-events: none;
    z-index: 10;
  }

  .carousel-arrow {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    color: var(--color-text);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    pointer-events: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .carousel-arrow:hover {
    background-color: var(--color-link);
    color: white;
    border-color: var(--color-link);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  .carousel-arrow:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .carousel-arrow:disabled:hover {
    background-color: var(--color-surface);
    color: var(--color-text);
    border-color: var(--color-border);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .carousel-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: var(--color-border);
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .carousel-dot:hover {
    background-color: var(--color-muted);
    transform: scale(1.2);
  }

  .carousel-dot.active {
    background-color: var(--color-link);
    transform: scale(1.3);
  }

  .carousel-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 800;
    color: var(--color-heading);
    line-height: 1;
  }

  .stat-label {
    font-size: 0.875rem;
    color: var(--color-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 0.5rem;
  }

  @media (max-width: 768px) {
    .testimonial-carousel {
      padding: 1rem;
    }

    .carousel-container {
      padding: 1.5rem;
    }

    .carousel-controls {
      left: 1rem;
      right: 1rem;
    }

    .testimonial-header {
      flex-direction: column;
      gap: 0.75rem;
    }

    .client-avatar {
      width: 60px;
      height: 60px;
    }

    .testimonial-content p {
      font-size: 1rem;
    }

    .carousel-arrow {
      width: 40px;
      height: 40px;
    }

    .carousel-stats {
      gap: 2rem;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .carousel-stats {
      flex-direction: column;
      gap: 1rem;
    }

  }
</style>

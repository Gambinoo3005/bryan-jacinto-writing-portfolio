---
export interface Props {
  content: {
    title: string;
    type: 'article' | 'case-study' | 'copy';
    excerpt: string;
    fullContent?: string;
    metrics?: {
      wordCount: number;
      readingTime: string;
      seoScore?: number;
      readabilityScore?: number;
    };
    highlights?: string[];
    callToAction?: string;
  };
  showMetrics?: boolean;
  showHighlights?: boolean;
}

const { content, showMetrics = true, showHighlights = true } = Astro.props;
---

<div class="content-preview" data-content-type={content.type}>
  <div class="preview-header">
    <div class="content-type-badge">
      <span class="type-icon">
        {content.type === 'article' && (
          <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"/>
          </svg>
        )}
        {content.type === 'case-study' && (
          <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        )}
        {content.type === 'copy' && (
          <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M7 2a1 1 0 000 2h6a1 1 0 100-2H7zM4 5a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zm-2 3a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zm0 4a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zm0 4a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
        )}
      </span>
      <span class="type-label">{content.type.replace('-', ' ')}</span>
    </div>
    
    {showMetrics && content.metrics && (
      <div class="content-metrics">
        <div class="metric">
          <span class="metric-value">{content.metrics.wordCount.toLocaleString()}</span>
          <span class="metric-label">words</span>
        </div>
        <div class="metric">
          <span class="metric-value">{content.metrics.readingTime}</span>
          <span class="metric-label">read</span>
        </div>
        {content.metrics.seoScore && (
          <div class="metric">
            <span class="metric-value">{content.metrics.seoScore}%</span>
            <span class="metric-label">SEO</span>
          </div>
        )}
        {content.metrics.readabilityScore && (
          <div class="metric">
            <span class="metric-value">{content.metrics.readabilityScore}</span>
            <span class="metric-label">readability</span>
          </div>
        )}
      </div>
    )}
  </div>

  <div class="preview-content">
    <h2 class="preview-title">{content.title}</h2>
    
    <div class="preview-excerpt">
      <p>{content.excerpt}</p>
    </div>

    {showHighlights && content.highlights && content.highlights.length > 0 && (
      <div class="content-highlights">
        <h4 class="highlights-title">Key Highlights</h4>
        <ul class="highlights-list">
          {content.highlights.map((highlight) => (
            <li class="highlight-item">
              <svg class="highlight-icon" width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
              </svg>
              <span>{highlight}</span>
            </li>
          ))}
        </ul>
      </div>
    )}

    {content.fullContent && (
      <div class="preview-expand">
        <button class="expand-button" data-expand="false">
          <span class="expand-text">Read Full Content</span>
          <svg class="expand-icon" width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/>
          </svg>
        </button>
        
        <div class="full-content" style="display: none;">
          <div class="content-body">
            {content.fullContent}
          </div>
        </div>
      </div>
    )}

    {content.callToAction && (
      <div class="preview-cta">
        <button class="cta-button">
          {content.callToAction}
          <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"/>
          </svg>
        </button>
      </div>
    )}
  </div>
</div>

<script>
  class DynamicContentPreview {
    private expandButton: HTMLButtonElement;
    private fullContent: HTMLElement;
    private isExpanded: boolean = false;

    constructor(container: HTMLElement) {
      this.expandButton = container.querySelector('.expand-button') as HTMLButtonElement;
      this.fullContent = container.querySelector('.full-content') as HTMLElement;
      
      if (this.expandButton && this.fullContent) {
        this.init();
      }
    }

    init() {
      this.expandButton.addEventListener('click', () => {
        this.toggleContent();
      });
    }

    toggleContent() {
      this.isExpanded = !this.isExpanded;
      
      if (this.isExpanded) {
        (this.fullContent as HTMLElement).style.display = 'block';
        this.expandButton.querySelector('.expand-text')!.textContent = 'Show Less';
        this.expandButton.querySelector('.expand-icon')!.style.transform = 'rotate(180deg)';
        this.expandButton.dataset.expand = 'true';
        
        // Smooth scroll to expanded content
        setTimeout(() => {
          this.fullContent.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'nearest' 
          });
        }, 100);
      } else {
        (this.fullContent as HTMLElement).style.display = 'none';
        this.expandButton.querySelector('.expand-text')!.textContent = 'Read Full Content';
        this.expandButton.querySelector('.expand-icon')!.style.transform = 'rotate(0deg)';
        this.expandButton.dataset.expand = 'false';
      }
    }
  }

  // Initialize all content previews
  document.addEventListener('DOMContentLoaded', () => {
    const previews = document.querySelectorAll('.content-preview');
    previews.forEach(preview => {
      new DynamicContentPreview(preview as HTMLElement);
    });
  });
</script>

<style>
  .content-preview {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 1rem;
    padding: 1.5rem;
    margin: 1rem 0;
    transition: all 0.3s ease;
  }

  .content-preview:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--color-border);
  }

  .content-type-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--surface-glass);
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--color-border);
  }

  .type-icon {
    color: var(--color-link);
  }

  .type-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-text);
    text-transform: capitalize;
  }

  .content-metrics {
    display: flex;
    gap: 1rem;
  }

  .metric {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .metric-value {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--color-heading);
    line-height: 1;
  }

  .metric-label {
    font-size: 0.75rem;
    color: var(--color-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 0.25rem;
  }

  .preview-content {
    space-y: 1.5rem;
  }

  .preview-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-heading);
    margin: 0 0 1rem 0;
    line-height: 1.3;
  }

  .preview-excerpt {
    color: var(--color-muted);
    line-height: 1.6;
    font-size: 1rem;
  }

  .content-highlights {
    background-color: rgba(59, 130, 246, 0.05);
    border: 1px solid rgba(59, 130, 246, 0.1);
    border-radius: 0.75rem;
    padding: 1.25rem;
    margin: 1.5rem 0;
  }

  .highlights-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-heading);
    margin: 0 0 1rem 0;
  }

  .highlights-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .highlight-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    color: var(--color-text);
    line-height: 1.5;
  }

  .highlight-icon {
    color: var(--color-link);
    flex-shrink: 0;
    margin-top: 0.125rem;
  }

  .preview-expand {
    margin: 1.5rem 0;
  }

  .expand-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    color: var(--color-link);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    width: 100%;
    justify-content: center;
  }

  .expand-button:hover {
    background-color: var(--surface-glass);
    border-color: var(--color-link);
  }

  .expand-icon {
    transition: transform 0.2s ease;
  }

  .full-content {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  .content-body {
    color: var(--color-text);
    line-height: 1.7;
  }

  .preview-cta {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid var(--color-border);
  }

  .cta-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--color-link);
    color: white;
    border: none;
    border-radius: 0.5rem;
    padding: 0.875rem 1.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    width: 100%;
    justify-content: center;
  }

  .cta-button:hover {
    background-color: var(--color-accent);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  @media (max-width: 768px) {
    .content-preview {
      padding: 1rem;
    }

    .preview-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .content-metrics {
      gap: 0.75rem;
    }

    .preview-title {
      font-size: 1.25rem;
    }

    .content-highlights {
      padding: 1rem;
    }
  }
</style>

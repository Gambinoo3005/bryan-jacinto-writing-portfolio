---
export interface Props {
  processSteps: Array<{
    id: string;
    title: string;
    description: string;
    duration: string;
    tools: string[];
    deliverables: string[];
    tips?: string[];
    icon: string;
  }>;
  showInteractive?: boolean;
  showDetails?: boolean;
}

const { 
  processSteps, 
  showInteractive = true, 
  showDetails = true 
} = Astro.props;
---

<div class="writing-process-timeline" id="writing-process-timeline">
  <div class="timeline-header">
    <h2 class="timeline-title">My Writing Process</h2>
    <p class="timeline-subtitle">A systematic approach to creating compelling content that converts</p>
  </div>

  <div class="timeline-container">
    <div class="timeline-track">
      {processSteps.map((step, index) => (
        <div 
          class={`timeline-step ${index === 0 ? 'active' : ''}`}
          data-step-id={step.id}
          data-step-index={index}
        >
          <div class="step-marker">
            <div class="step-number">{index + 1}</div>
          </div>

          <div class="step-content">
            <div class="step-header">
              <h3 class="step-title">{step.title}</h3>
              <span class="step-duration">{step.duration}</span>
            </div>
            
            <p class="step-description">{step.description}</p>

            {showDetails && (
              <div class="step-details">
                <div class="detail-section">
                  <h4 class="detail-title">Tools Used</h4>
                  <div class="tools-list">
                    {step.tools.map((tool) => (
                      <span class="tool-tag">{tool}</span>
                    ))}
                  </div>
                </div>

                <div class="detail-section">
                  <h4 class="detail-title">Deliverables</h4>
                  <ul class="deliverables-list">
                    {step.deliverables.map((deliverable) => (
                      <li class="deliverable-item">
                        <svg class="deliverable-icon" width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
                        </svg>
                        <span>{deliverable}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {step.tips && step.tips.length > 0 && (
                  <div class="detail-section">
                    <h4 class="detail-title">Pro Tips</h4>
                    <ul class="tips-list">
                      {step.tips.map((tip) => (
                        <li class="tip-item">
                          <svg class="tip-icon" width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd"/>
                          </svg>
                          <span>{tip}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}

            {showInteractive && (
              <button class="step-toggle" data-step={index}>
                <span class="toggle-text">Show Details</span>
                <svg class="toggle-icon" width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/>
                </svg>
              </button>
            )}
          </div>
        </div>
      ))}
    </div>

  </div>

  <!-- Process Summary -->
  <div class="process-summary">
    <div class="summary-stats">
      <div class="summary-stat">
        <span class="stat-value">{processSteps.length}</span>
        <span class="stat-label">Process Steps</span>
      </div>
      <div class="summary-stat">
        <span class="stat-value">{processSteps.reduce((acc, step) => acc + parseInt(step.duration), 0)}</span>
        <span class="stat-label">Total Hours</span>
      </div>
      <div class="summary-stat">
        <span class="stat-value">100%</span>
        <span class="stat-label">Quality Assured</span>
      </div>
    </div>
  </div>
</div>

<script>
  class WritingProcessTimeline {
    private steps: NodeListOf<HTMLElement>;
    private toggleButtons: NodeListOf<HTMLButtonElement>;
    private currentStep: number = 0;

    constructor(container: HTMLElement) {
      this.steps = container.querySelectorAll('.timeline-step');
      this.toggleButtons = container.querySelectorAll('.step-toggle');
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.setupScrollTracking();
    }

    setupEventListeners() {
      // Toggle buttons for interactive details
      this.toggleButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
          this.toggleStepDetails(index);
        });
      });

      // Step click navigation
      this.steps.forEach((step, index) => {
        step.addEventListener('click', () => {
          this.goToStep(index);
        });
      });
    }

    setupScrollTracking() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const stepIndex = parseInt(entry.target.getAttribute('data-step-index') || '0');
            this.currentStep = stepIndex;
            this.updateActiveStep();
          }
        });
      }, {
        threshold: 0.5,
        rootMargin: '-20% 0px -20% 0px'
      });

      this.steps.forEach(step => {
        observer.observe(step);
      });
    }

    toggleStepDetails(stepIndex: number) {
      const step = this.steps[stepIndex];
      const details = step.querySelector('.step-details') as HTMLElement;
      const button = this.toggleButtons[stepIndex];
      const toggleText = button.querySelector('.toggle-text') as HTMLElement;
      const toggleIcon = button.querySelector('.toggle-icon') as HTMLElement;

      if (details.style.display === 'none' || !details.style.display) {
        details.style.display = 'block';
        toggleText.textContent = 'Hide Details';
        toggleIcon.style.transform = 'rotate(180deg)';
        step.classList.add('expanded');
      } else {
        details.style.display = 'none';
        toggleText.textContent = 'Show Details';
        toggleIcon.style.transform = 'rotate(0deg)';
        step.classList.remove('expanded');
      }
    }

    goToStep(stepIndex: number) {
      this.currentStep = stepIndex;
      this.updateActiveStep();
      
      // Smooth scroll to step
      this.steps[stepIndex].scrollIntoView({
        behavior: 'smooth',
        block: 'center'
      });
    }

    updateActiveStep() {
      this.steps.forEach((step, index) => {
        step.classList.toggle('active', index === this.currentStep);
      });
    }

  }

  // Initialize all timelines
  document.addEventListener('DOMContentLoaded', () => {
    const timelines = document.querySelectorAll('.writing-process-timeline');
    timelines.forEach(timeline => {
      new WritingProcessTimeline(timeline as HTMLElement);
    });
  });
</script>

<style>
  .writing-process-timeline {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }

  .timeline-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .timeline-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--color-heading);
    margin: 0 0 1rem 0;
  }

  .timeline-subtitle {
    font-size: 1.125rem;
    color: var(--color-muted);
    margin: 0;
    max-width: 600px;
    margin: 0 auto;
  }

  .timeline-container {
    position: relative;
  }

  .timeline-track {
    position: relative;
    padding-left: 0;
  }


  .timeline-step {
    position: relative;
    margin-bottom: 3rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .timeline-step:hover {
    transform: translateY(-4px);
  }

  .timeline-step.active {
    transform: translateY(-4px);
  }

  .step-marker {
    position: relative;
    top: 0;
    width: 2.5rem;
    height: 2.5rem;
    background-color: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .timeline-step.active .step-marker {
    background-color: var(--color-link);
    border-color: var(--color-link);
    color: white;
    transform: scale(1.1);
  }


  .step-number {
    width: 100%;
    height: 100%;
    background-color: var(--color-accent);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    font-weight: 700;
  }

  .step-content {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 1rem;
    padding: 1.5rem;
    transition: all 0.3s ease;
  }

  .timeline-step.active .step-content {
    border-color: var(--color-link);
  }

  .timeline-step.expanded .step-content {
    border-color: var(--color-link);
  }

  .step-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .step-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-heading);
    margin: 0;
  }

  .step-duration {
    background-color: var(--surface-glass);
    color: var(--color-muted);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .step-description {
    color: var(--color-text);
    line-height: 1.6;
    margin: 0 0 1.5rem 0;
  }

  .step-details {
    display: none;
    border-top: 1px solid var(--color-border);
    padding-top: 1.5rem;
    margin-top: 1.5rem;
  }

  .detail-section {
    margin-bottom: 1.5rem;
  }

  .detail-section:last-child {
    margin-bottom: 0;
  }

  .detail-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-heading);
    margin: 0 0 0.75rem 0;
  }

  .tools-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tool-tag {
    background-color: var(--surface-glass);
    color: var(--color-text);
    padding: 0.375rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    border: 1px solid var(--color-border);
  }

  .deliverables-list,
  .tips-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .deliverable-item,
  .tip-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    color: var(--color-text);
    line-height: 1.5;
  }

  .deliverable-icon,
  .tip-icon {
    color: var(--color-link);
    flex-shrink: 0;
    margin-top: 0.125rem;
  }

  .step-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    color: var(--color-link);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    width: 100%;
    justify-content: center;
  }

  .step-toggle:hover {
    background-color: var(--surface-glass);
    border-color: var(--color-link);
  }

  .toggle-icon {
    transition: transform 0.2s ease;
  }

  .process-summary {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .summary-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
  }

  .summary-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .stat-value {
    font-size: 2rem;
    font-weight: 800;
    color: var(--color-heading);
    line-height: 1;
  }

  .stat-label {
    font-size: 0.875rem;
    color: var(--color-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 0.5rem;
  }

  @media (max-width: 768px) {
    .writing-process-timeline {
      padding: 1rem;
    }

    .timeline-title {
      font-size: 2rem;
    }

    .step-marker {
      width: 2rem;
      height: 2rem;
    }

    .step-number {
      font-size: 0.75rem;
    }

    .step-content {
      padding: 1rem;
    }

    .step-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .summary-stats {
      gap: 2rem;
    }

    .stat-value {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .summary-stats {
      flex-direction: column;
      gap: 1rem;
    }

    .tools-list {
      gap: 0.25rem;
    }

    .tool-tag {
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
    }
  }
</style>

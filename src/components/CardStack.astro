---
// CardStack.astro - A deck of cards with arrow navigation
export interface Props {
  cards: Array<{
    id: string;
    title: string;
    description: string;
    company?: string;
    period?: string;
    location?: string;
    image?: string;
    link?: string;
  }>;
  cardWidth?: string;
  cardHeight?: string;
  stackShift?: number;
  stackScale?: number;
  enterRotation?: number;
  enterOpacity?: number;
  transitionDuration?: number;
}

const {
  cards,
  cardWidth = "400px",
  cardHeight = "300px",
  stackShift = 48,
  stackScale = 0.05,
  enterRotation = 6,
  enterOpacity = 0.7,
  transitionDuration = 400
} = Astro.props;

if (!cards || cards.length === 0) {
  throw new Error("CardStack requires at least one card");
}
---

<div class="card-stack-container" 
     data-card-width={cardWidth} 
     data-card-height={cardHeight}
     data-stack-shift={stackShift}
     data-stack-scale={stackScale}
     data-enter-rotation={enterRotation}
     data-enter-opacity={enterOpacity}
     data-transition-duration={transitionDuration}>
  <div class="card-stack-wrapper">
    <!-- Card Deck -->
    <div class="card-deck">
      {cards.map((card, index) => (
        <div 
          class={`card ${index === 0 ? 'card-active' : 'card-stacked'}`}
          data-index={index}
          data-card-id={card.id}
          style={`
            --stack-shift: ${stackShift}px;
            --stack-scale: ${stackScale};
            --enter-rotation: ${enterRotation}deg;
            --enter-opacity: ${enterOpacity};
            --transition-duration: ${transitionDuration}ms;
            --card-width: ${cardWidth};
            --card-height: ${cardHeight};
          `}
        >
          <div class="card-content">
            {card.image && (
              <div class="card-image">
                <img src={card.image} alt={card.title} />
              </div>
            )}
            <div class="card-body">
              <div class="card-header">
                <h3 class="card-title">{card.title}</h3>
                {card.company && (
                  <div class="card-meta">
                    <span class="card-company">{card.company}</span>
                    {card.period && <span class="card-period">{card.period}</span>}
                    {card.location && <span class="card-location">{card.location}</span>}
                  </div>
                )}
              </div>
              <p class="card-description">{card.description}</p>
              {index === 0 && cards.length > 1 && (
                <div class="card-stack-indicator">
                  <span class="stack-count">{cards.length} experiences</span>
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Navigation Controls -->
    <div class="card-stack-controls">
      <button 
        class="nav-button nav-button-left" 
        aria-label="Previous card"
        disabled
      >
        <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"/>
        </svg>
      </button>
      
      <button 
        class="nav-button nav-button-right" 
        aria-label="Next card"
        disabled={cards.length <= 1}
      >
        <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  class CardStack {
    private container: HTMLElement;
    private cards: HTMLElement[];
    private leftButton: HTMLButtonElement;
    private rightButton: HTMLButtonElement;
    private currentIndex: number;
    private totalCards: number;

    constructor(container: HTMLElement) {
      this.container = container;
      this.cards = Array.from(container.querySelectorAll('.card')) as HTMLElement[];
      this.leftButton = container.querySelector('.nav-button-left') as HTMLButtonElement;
      this.rightButton = container.querySelector('.nav-button-right') as HTMLButtonElement;
      this.currentIndex = 0;
      this.totalCards = this.cards.length;
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.updateButtonStates();
      this.positionCards();
    }

    setupEventListeners() {
      this.leftButton.addEventListener('click', () => this.previousCard());
      this.rightButton.addEventListener('click', () => this.nextCard());
      
      // Keyboard support
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previousCard();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.nextCard();
        }
      });

      // Touch/swipe support for mobile
      let startX = 0;
      let startY = 0;
      
      this.container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      });
      
      this.container.addEventListener('touchend', (e) => {
        if (!startX || !startY) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        
        const diffX = startX - endX;
        const diffY = startY - endY;
        
        // Only trigger if horizontal swipe is more significant than vertical
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          if (diffX > 0) {
            // Swipe left - next card
            this.nextCard();
          } else {
            // Swipe right - previous card
            this.previousCard();
          }
        }
        
        startX = 0;
        startY = 0;
      });
    }

    nextCard() {
      if (this.currentIndex < this.totalCards - 1) {
        this.currentIndex++;
        this.updateCards();
        this.updateButtonStates();
      }
    }

    previousCard() {
      if (this.currentIndex > 0) {
        this.currentIndex--;
        this.updateCards();
        this.updateButtonStates();
      }
    }

    updateCards() {
      this.cards.forEach((card: HTMLElement, index: number) => {
        const cardElement = card;
        const distance = index - this.currentIndex;
        
        // Remove all classes first
        cardElement.classList.remove('card-active', 'card-stacked', 'card-hidden', 'card-hidden-text');
        
        // Smoother staggered delay
        const delay = Math.abs(distance) * 25; // Reduced delay for smoother feel
        
        if (distance === 0) {
          // Active card (centered)
          cardElement.classList.add('card-active');
          cardElement.style.transitionDelay = `${delay}ms`;
          cardElement.style.transform = 'translateX(-50%) scale(1) rotate(0deg)';
          cardElement.style.opacity = '1';
          cardElement.style.zIndex = '100';
        } else if (distance > 0) {
          // Future cards (right side, tilted) - hide text content
          cardElement.classList.add('card-stacked', 'card-hidden-text');
          const offset = distance * this.getStackShift();
          const scale = Math.max(0.92, 1 - (distance * this.getStackScale())); // Less aggressive scaling
          const rotation = this.getEnterRotation() * (1 - distance * 0.08); // Smoother rotation
          const opacity = Math.max(0.4, this.getEnterOpacity() - (distance * 0.08)); // Better opacity
          
          cardElement.style.transitionDelay = `${delay}ms`;
          cardElement.style.transform = `translateX(calc(-50% + ${offset}px)) scale(${scale}) rotate(${rotation}deg)`;
          cardElement.style.opacity = opacity.toString();
          cardElement.style.zIndex = (50 - distance).toString();
        } else {
          // Past cards (left side, stacked) - hide text content
          cardElement.classList.add('card-stacked', 'card-hidden-text');
          const offset = distance * this.getStackShift();
          const scale = Math.max(0.92, 1 - (Math.abs(distance) * this.getStackScale())); // Less aggressive scaling
          const opacity = Math.max(0.4, 0.7 - (Math.abs(distance) * 0.08)); // Better opacity
          
          cardElement.style.transitionDelay = `${delay}ms`;
          cardElement.style.transform = `translateX(calc(-50% + ${offset}px)) scale(${scale}) rotate(0deg)`;
          cardElement.style.opacity = opacity.toString();
          cardElement.style.zIndex = (50 + distance).toString();
        }
      });

      // Reset transition delays after animation completes
      setTimeout(() => {
        this.cards.forEach((card: HTMLElement) => {
          card.style.transitionDelay = '0ms';
        });
      }, 800 + (this.cards.length * 25)); // Adjusted timing
    }

    updateButtonStates() {
      this.leftButton.disabled = this.currentIndex === 0;
      this.rightButton.disabled = this.currentIndex === this.totalCards - 1;
    }

    positionCards() {
      this.updateCards();
    }

    getStackShift(): number {
      return parseInt(this.container.dataset.stackShift || '48');
    }

    getStackScale(): number {
      return parseFloat(this.container.dataset.stackScale || '0.05');
    }

    getEnterRotation(): number {
      return parseInt(this.container.dataset.enterRotation || '6');
    }

    getEnterOpacity(): number {
      return parseFloat(this.container.dataset.enterOpacity || '0.7');
    }
  }

  // Initialize all card stacks on the page
  document.addEventListener('DOMContentLoaded', () => {
    const cardStacks = document.querySelectorAll('.card-stack-container');
    cardStacks.forEach(container => {
      new CardStack(container as HTMLElement);
    });
  });
</script>

<style>
  .card-stack-container {
    --stack-shift: 60px;
    --stack-scale: 0.05;
    --enter-rotation: 6deg;
    --enter-opacity: 0.7;
    --transition-duration: 400ms;
    --card-width: 784px;
    --card-height: 343px;
    --shadow-active: 0 20px 40px rgba(14, 51, 87, 0.15);
    --shadow-stacked: 0 8px 20px rgba(14, 51, 87, 0.08);
  }

  .card-stack-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
  }

  .card-stack-controls {
    display: flex;
    gap: 1rem;
    z-index: 5;
    position: relative;
  }

  .nav-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: var(--surface-glass);
    border: 1px solid var(--color-border);
    color: var(--color-text);
    transition: all var(--transition-duration) ease;
    box-shadow: var(--shadow-stacked);
    cursor: pointer;
  }

  .nav-button:hover:not(:disabled) {
    background-color: var(--surface-glass-strong);
    border-color: var(--color-link);
    color: var(--color-link);
    box-shadow: var(--shadow-active);
    transform: translateY(-2px);
  }

  .nav-button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    transform: none;
  }

  .nav-button:disabled:hover {
    background-color: var(--surface-glass);
    border-color: var(--color-border);
    color: var(--color-text);
    box-shadow: var(--shadow-stacked);
    transform: none;
  }

  .nav-button:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px white, 0 0 0 4px var(--color-link);
  }

  .card-deck {
    position: relative;
    width: var(--card-width);
    height: var(--card-height);
    perspective: 1000px;
    touch-action: pan-y; /* Allow vertical scrolling but handle horizontal swipes */
    margin: 0 auto;
    max-width: calc(100vw - 8rem);
    overflow: visible; /* Allow cards to extend beyond deck for stacking effect */
    isolation: isolate;
    z-index: 10;
    /* Ensure proper stacking context */
    transform-style: preserve-3d;
    /* Ensure proper rendering of child elements */
    contain: none;
  }

  .card {
    position: absolute;
    top: 0;
    left: 50%;
    width: var(--card-width);
    height: var(--card-height);
    max-width: calc(100vw - 8rem);
    transform: translateX(-50%);
    transition: all 800ms cubic-bezier(0.16, 1, 0.3, 1);
    cursor: pointer;
    will-change: transform, opacity;
    isolation: isolate;
    /* Removed contain property to fix edge rendering issues */
    /* Improve text rendering during transforms */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }

  .card-content {
    width: 100%;
    height: 100%;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 16px;
    overflow: hidden; /* Keep hidden to maintain card boundaries */
    box-shadow: var(--shadow-stacked);
    transition: box-shadow 800ms cubic-bezier(0.16, 1, 0.3, 1);
    display: flex;
    flex-direction: column;
    will-change: box-shadow;
    isolation: isolate;
    position: relative;
    z-index: 1;
    /* Ensure proper border rendering */
    box-sizing: border-box;
    /* Add subtle outline to ensure edges are visible */
    outline: 1px solid transparent;
    outline-offset: -1px;
  }

  .card-active .card-content {
    box-shadow: var(--shadow-active);
  }

  /* Ensure card borders are always visible with pseudo-element */
  .card-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border: 1px solid var(--color-border);
    border-radius: 16px;
    pointer-events: none;
    z-index: 1;
  }

  /* Hide all text content on stacked cards while keeping card structure visible */
  .card-hidden-text .card-body {
    opacity: 0;
    transition: opacity 400ms ease;
  }

  .card-active .card-body {
    opacity: 1;
    transition: opacity 400ms ease;
  }

  /* Ensure card structure remains visible even when text is hidden */
  .card-hidden-text .card-content {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    /* Add subtle visual depth for stacked cards */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .card:hover {
    transform: translateX(-50%) translateY(-2px) !important;
    transition: transform 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94), box-shadow 200ms ease !important;
  }

  .card:hover .card-content {
    box-shadow: 0 25px 50px rgba(14, 51, 87, 0.2) !important;
  }

  .card-active:hover {
    transform: translateX(-50%) translateY(-3px) !important;
    transition: transform 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94), box-shadow 200ms ease !important;
  }

  .card-active:hover .card-content {
    box-shadow: 0 30px 60px rgba(14, 51, 87, 0.25) !important;
  }

  .card-image {
    width: 100%;
    height: 40%;
    overflow: hidden;
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 600ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
  }

  .card-active .card-image img {
    transform: scale(1.02);
  }

  .card-body {
    flex: 1;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    z-index: 2; /* Above the pseudo-element border */
    background-color: var(--color-surface);
    /* Ensure content fits within card boundaries */
    overflow: hidden;
    box-sizing: border-box;
    /* Improve text rendering during hover transforms */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    backface-visibility: hidden;
    transform: translateZ(0); /* Force hardware acceleration */
  }

  .card-header {
    margin-bottom: 0.75rem;
  }

  .card-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--color-heading);
    margin: 0 0 1rem 0;
    line-height: 1.3;
    /* Prevent text blurriness during hover */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }

  .card-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    margin-bottom: 0.25rem;
  }

  .card-company {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--color-link);
    background-color: var(--surface-glass);
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: 1px solid var(--color-border);
  }

  .card-period {
    font-size: 1rem;
    color: var(--color-muted);
    font-weight: 500;
  }

  .card-location {
    font-size: 1rem;
    color: var(--color-muted);
    font-weight: 500;
  }

  .card-description {
    font-size: 1.125rem;
    color: var(--color-muted);
    line-height: 1.6;
    margin: 0 0 1.5rem 0;
    flex: 1;
    /* Prevent text blurriness during hover */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }


  .card-stack-indicator {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: var(--surface-glass);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--color-muted);
    backdrop-filter: blur(8px);
  }

  .stack-count {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .stack-count::before {
    content: "📚";
    font-size: 0.875rem;
  }

  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .card-stack-wrapper {
      padding: 1.5rem;
    }
  }

  @media (max-width: 900px) {
    .card-deck {
      width: calc(100vw - 4rem);
      max-width: none;
    }
    
    .card {
      width: calc(100vw - 4rem);
      max-width: none;
    }
  }

  @media (max-width: 768px) {
    .card-stack-container {
      --stack-scale: 0.08;
      --enter-rotation: 4deg;
    }

    .card-stack-wrapper {
      padding: 1rem;
      gap: 1.5rem;
    }

    .card-body {
      padding: 1rem;
    }

    .card-title {
      font-size: 1.625rem;
    }

    .card-company {
      font-size: 1rem;
      padding: 0.4rem 0.8rem;
    }

    .card-period,
    .card-location {
      font-size: 0.95rem;
    }

    .card-description {
      font-size: 1.05rem;
    }

    .nav-button {
      width: 44px;
      height: 44px;
    }

    .card-stack-controls {
      gap: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .card-stack-container {
      --stack-scale: 0.1;
      --enter-rotation: 3deg;
    }

    .card-stack-wrapper {
      padding: 0.75rem;
      gap: 1rem;
    }

    .card-body {
      padding: 0.75rem;
    }

    .card-title {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }

    .card-company {
      font-size: 0.95rem;
      padding: 0.35rem 0.7rem;
    }

    .card-period,
    .card-location {
      font-size: 0.9rem;
    }

    .card-description {
      font-size: 1rem;
      margin-bottom: 0.75rem;
    }

    .nav-button {
      width: 40px;
      height: 40px;
    }

    .nav-button svg {
      width: 16px;
      height: 16px;
    }

    .card-stack-controls {
      gap: 0.5rem;
    }
  }

  /* Extra small screens */
  @media (max-width: 360px) {
    .card-body {
      padding: 0.5rem;
    }

    .card-title {
      font-size: 1.375rem;
    }

    .card-company {
      font-size: 0.9rem;
      padding: 0.3rem 0.6rem;
    }

    .card-period,
    .card-location {
      font-size: 0.85rem;
    }

    .card-description {
      font-size: 0.95rem;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .card {
      transition: opacity var(--transition-duration) ease;
    }
    
    .card-content {
      transition: box-shadow var(--transition-duration) ease;
    }
    
    .nav-button {
      transition: background-color var(--transition-duration) ease, 
                  border-color var(--transition-duration) ease, 
                  color var(--transition-duration) ease;
    }
  }
</style>
